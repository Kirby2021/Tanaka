{"version":3,"sources":["Commands/search/screenshot.js"],"names":["isUrl","require","Command","request","url","module","exports","[object Object]","client","super","name","aliases","memberName","group","description","throttling","usages","duration","args","key","prompt","type","validate","m","this","nsfwList","msg","link","channel","startTyping","fetchNSFWList","parsed","parse","some","nsfwURL","host","nsfw","reply","body","get","say","files","attachment","stopTyping","force","text","split","filter","site","startsWith","map","replace"],"mappings":"AAAA,MAAMA,MAAEA,OAAUC,QAAQ,0BACpBC,QAAEA,SAAYD,QAAQ,uBACtBE,QAAUF,QAAQ,mBAClBG,IAAMH,QAAQ,OAEpBI,OAAOC,QAAU,cAAgCJ,QAChDK,YAAYC,GACXC,MAAMD,EAAQ,CACbE,KAAM,aACNC,QAAS,CAAC,MACVC,WAAY,aACZC,MAAO,SACPC,YAAa,yBACbC,WAAY,CACXC,OAAQ,EACRC,SAAU,IAEXC,KAAM,CACL,CACCC,IAAK,OACLC,OAAQ,mCACRC,KAAM,SACNC,SAAWC,GAAMvB,MAAMuB,OAK1BC,KAAKC,SAAW,KAGjBlB,UAAUmB,GAAKC,KAAEA,IAChB,UACOD,EAAIE,QAAQC,cAEbL,KAAKC,gBAAgBD,KAAKM,gBAE/B,MAAMC,EAAS3B,IAAI4B,MAAML,GAEzB,GAAIH,KAAKC,SAASQ,MAAMC,GAAYH,EAAOI,OAASD,MAAaR,EAAIE,QAAQQ,KAC5E,OAAOV,EAAIW,MAAM,0DAElB,MAAMC,KAAEA,SAAenC,QAAQoC,IAC9B,2DAA2DZ,KAK5D,OAFAD,EAAIc,IAAI,CAAEC,MAAO,CAAC,CAAEC,WAAYJ,EAAM5B,KAAM,qBAErCgB,EAAIE,QAAQe,aAClB,MAGD,OAFAjB,EAAIW,MAAM,2CAEHX,EAAIE,QAAQe,cAIrBpC,oBAAoBqC,GAAQ,GAC3B,IAAKA,GAASpB,KAAKC,SAAU,OAAOD,KAAKC,SAEzC,MAAMoB,KAAEA,SAAe1C,QAAQoC,IAAI,oEAOnC,OALAf,KAAKC,SAAWoB,EACdC,MAAM,MACNC,QAAQC,GAASA,IAASA,EAAKC,WAAW,OAC1CC,KAAKF,GAASA,EAAKG,QAAQ,aAAc,MAEpC3B,KAAKC","file":"screenshot.js","sourcesContent":["const { isUrl } = require('../../Structures/Util');\nconst { Command } = require('discord.js-commando');\nconst request = require('node-superfetch');\nconst url = require('url');\n\nmodule.exports = class ScreenshotCommand extends Command {\n\tconstructor(client) {\n\t\tsuper(client, {\n\t\t\tname: 'screenshot',\n\t\t\taliases: ['ss'],\n\t\t\tmemberName: 'screenshot',\n\t\t\tgroup: 'search',\n\t\t\tdescription: 'Screenshots a website.',\n\t\t\tthrottling: {\n\t\t\t\tusages: 2,\n\t\t\t\tduration: 60,\n\t\t\t},\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'link',\n\t\t\t\t\tprompt: 'What is the link of the website?',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalidate: (m) => isUrl(m),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\tthis.nsfwList = null;\n\t}\n\n\tasync run(msg, { link }) {\n\t\ttry {\n\t\t\tawait msg.channel.startTyping();\n\n\t\t\tif (!this.nsfwList) await this.fetchNSFWList();\n\n\t\t\tconst parsed = url.parse(link);\n\n\t\t\tif (this.nsfwList.some((nsfwURL) => parsed.host === nsfwURL) && !msg.channel.nsfw)\n\t\t\t\treturn msg.reply('This site is NSFW. Please try again in a NSFW channel.');\n\n\t\t\tconst { body } = await request.get(\n\t\t\t\t`https://image.thum.io/get/width/1920/crop/675/noanimate/${link}`,\n\t\t\t);\n\n\t\t\tmsg.say({ files: [{ attachment: body, name: 'screenshot.png' }] });\n\n\t\t\treturn msg.channel.stopTyping();\n\t\t} catch {\n\t\t\tmsg.reply(\"Couldn't find any results. Invalid URL?\");\n\n\t\t\treturn msg.channel.stopTyping();\n\t\t}\n\t}\n\n\tasync fetchNSFWList(force = false) {\n\t\tif (!force && this.nsfwList) return this.nsfwList;\n\n\t\tconst { text } = await request.get('https://blocklistproject.github.io/Lists/alt-version/porn-nl.txt');\n\n\t\tthis.nsfwList = text\n\t\t\t.split('\\n')\n\t\t\t.filter((site) => site && !site.startsWith('#'))\n\t\t\t.map((site) => site.replace(/^(0.0.0.0)/, ''));\n\n\t\treturn this.nsfwList;\n\t}\n};\n"]}