{"version":3,"sources":["Commands/search/ocr.js"],"names":["isUrl","require","Command","MessageEmbed","request","module","exports","[object Object]","client","super","name","aliases","group","memberName","description","clientPermissions","args","key","prompt","type","validate","m","throttling","usages","duration","msg","image","body","get","query","apikey","process","env","OCR_KEY","url","ocrengine","data","ParsedResults","ParsedText","length","say","embed","setImage","setColor","setDescription","setFooter","author","tag","displayAvatarURL","dynamic","setTimestamp","err","reply","message"],"mappings":"AAAA,MAAMA,MAAEA,OAAUC,QAAQ,0BACpBC,QAAEA,SAAYD,QAAQ,wBACtBE,aAAEA,cAAiBF,QAAQ,cAC3BG,QAAUH,QAAQ,mBAExBI,OAAOC,QAAU,cAAyBJ,QACzCK,YAAYC,GACXC,MAAMD,EAAQ,CACbE,KAAM,MACNC,QAAS,CAAC,iCACVC,MAAO,SACPC,WAAY,MACZC,YAAa,8BACbC,kBAAmB,CAAC,eACpBC,KAAM,CACL,CACCC,IAAK,QACLC,OAAQ,uCACRC,KAAM,QACNC,SAAWC,IAAOrB,MAAMqB,KAG1BC,WAAY,CACXC,OAAQ,EACRC,SAAU,MAKbjB,UAAUkB,GAAKC,MAAEA,IAChB,IACC,MAAMC,KAAEA,SAAevB,QAAQwB,IAAI,wCAAwCC,MAAM,CAChFC,OAAQC,QAAQC,IAAIC,QACpBC,IAAKR,EACLS,UAAW,IAENC,EAAOT,EAAKU,cAAc,GAAGC,WAEnC,GAAoB,IAAhBF,EAAKG,OAAc,OAAOd,EAAIe,IAAI,2BAEtC,MAAMC,GAAQ,IAAItC,cAChBuC,SAAShB,GACTiB,SAAS,UACTC,eAAeR,GACfS,UACA,gBAAgBpB,EAAIqB,OAAOC,MAC3BtB,EAAIqB,OAAOE,iBAAiB,CAAEC,SAAS,KAEvCC,eAEF,OAAOzB,EAAIgB,MAAMA,GAChB,MAAOU,GACR,OAAO1B,EAAI2B,MAAM,uBAAuBD,EAAIE","file":"ocr.js","sourcesContent":["const { isUrl } = require('../../Structures/Util');\nconst { Command } = require('discord.js-commando');\nconst { MessageEmbed } = require('discord.js');\nconst request = require('node-superfetch');\n\nmodule.exports = class OCRCommand extends Command {\n\tconstructor(client) {\n\t\tsuper(client, {\n\t\t\tname: 'ocr',\n\t\t\taliases: ['optical-character-recognition'],\n\t\t\tgroup: 'search',\n\t\t\tmemberName: 'ocr',\n\t\t\tdescription: 'Lists the text in an image.',\n\t\t\tclientPermissions: ['EMBED_LINKS'],\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'image',\n\t\t\t\t\tprompt: 'What image would you like to search?',\n\t\t\t\t\ttype: 'image',\n\t\t\t\t\tvalidate: (m) => (isUrl(m) ? false : true),\n\t\t\t\t},\n\t\t\t],\n\t\t\tthrottling: {\n\t\t\t\tusages: 2,\n\t\t\t\tduration: 60,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(msg, { image }) {\n\t\ttry {\n\t\t\tconst { body } = await request.get('https://api.ocr.space/parse/imageurl').query({\n\t\t\t\tapikey: process.env.OCR_KEY,\n\t\t\t\turl: image,\n\t\t\t\tocrengine: 2,\n\t\t\t});\n\t\t\tconst data = body.ParsedResults[0].ParsedText;\n\n\t\t\tif (data.length === 0) return msg.say(\"Couldn't find any text.\");\n\n\t\t\tconst embed = new MessageEmbed()\n\t\t\t\t.setImage(image)\n\t\t\t\t.setColor('RANDOM')\n\t\t\t\t.setDescription(data)\n\t\t\t\t.setFooter(\n\t\t\t\t\t`Requested by ${msg.author.tag}`,\n\t\t\t\t\tmsg.author.displayAvatarURL({ dynamic: true }),\n\t\t\t\t)\n\t\t\t\t.setTimestamp();\n\n\t\t\treturn msg.embed(embed);\n\t\t} catch (err) {\n\t\t\treturn msg.reply(`An error occured: \\`${err.message}\\`.`);\n\t\t}\n\t}\n};\n"]}