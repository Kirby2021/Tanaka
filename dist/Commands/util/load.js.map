{"version":3,"sources":["Commands/util/load.js"],"names":["Command","require","access","constants","module","exports","[object Object]","client","super","name","aliases","group","memberName","description","ownerOnly","guarded","args","key","prompt","validate","val","Promise","resolve","split","length","this","registry","findCommands","cmdPath","resolveCommandPath","R_OK","err","parse","cache","msg","command","registerCommand","cmd","commands","last","shard","broadcastEval","shards","join","groupID","emit","reply"],"mappings":"AAAA,MAAMA,QAAEA,SAAYC,QAAQ,wBACtBC,OAAEA,OAAMC,UAAEA,WAAcF,QAAQ,MAEtCG,OAAOC,QAAU,cAA0BL,QAC1CM,YAAYC,GACXC,MAAMD,EAAQ,CACbE,KAAM,OACNC,QAAS,CAAC,eAAgB,YAC1BC,MAAO,OACPC,WAAY,OACZC,YAAa,uBACbC,WAAW,EACXC,SAAS,EACTC,KAAM,CACL,CACCC,IAAK,UACLC,OAAQ,wCACRC,SAAWC,GACV,IAAIC,SAASC,IACZ,IAAKF,EAAK,OAAOE,GAAQ,GAEzB,MAAMC,EAAQH,EAAIG,MAAM,KAExB,GAAqB,IAAjBA,EAAMC,OAAc,OAAOF,GAAQ,GACvC,GAAIG,KAAKlB,OAAOmB,SAASC,aAAaP,GAAKI,OAAS,EACnD,OAAOF,EAAQ,uCAEhB,MAAMM,EAAUH,KAAKlB,OAAOmB,SAASG,mBACpCN,EAAM,GACNA,EAAM,IAOP,OAJArB,OAAO0B,EAASzB,UAAU2B,MAAOC,GAC1BT,GAANS,KAGM,QAETC,MAAQZ,IACP,MAAMG,EAAQH,EAAIG,MAAM,KAClBK,EAAUH,KAAKlB,OAAOmB,SAASG,mBACpCN,EAAM,GACNA,EAAM,IAKP,cAFOtB,QAAQgC,MAAML,GAEd3B,QAAQ2B,QAOpBtB,UAAU4B,GAAKC,QAAEA,IAChBV,KAAKlB,OAAOmB,SAASU,gBAAgBD,GAErC,MAAME,EAAMZ,KAAKlB,OAAOmB,SAASY,SAASC,OAE1C,GAAId,KAAKlB,OAAOiC,MACf,UACOf,KAAKlB,OAAOiC,MAAMC,cAAc,4BACtBhB,KAAKlB,OAAOiC,MAAME,OAAOC,KAAK,6IAGQN,EAAIO,cAAcP,EAAI5B,8IAM3E,MAAOsB,GAMR,OALAN,KAAKlB,OAAOsC,KAAK,OAAQ,yDACzBpB,KAAKlB,OAAOsC,KAAK,QAASd,SAEpBG,EAAIY,MAAM,YAAYT,EAAI5B,uDAEzB,KAMT,aAFMyB,EAAIY,MAAM,YAAYT,EAAI5B,iBAAiBgB,KAAKlB,OAAOiC,MAAQ,iBAAmB,OAEjF","file":"load.js","sourcesContent":["const { Command } = require('discord.js-commando');\nconst { access, constants } = require('fs');\n\nmodule.exports = class LoadCommand extends Command {\n\tconstructor(client) {\n\t\tsuper(client, {\n\t\t\tname: 'load',\n\t\t\taliases: ['load-command', 'load-cmd'],\n\t\t\tgroup: 'util',\n\t\t\tmemberName: 'load',\n\t\t\tdescription: 'Loads a new command.',\n\t\t\townerOnly: true,\n\t\t\tguarded: true,\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'command',\n\t\t\t\t\tprompt: 'Which command would you like to load?',\n\t\t\t\t\tvalidate: (val) =>\n\t\t\t\t\t\tnew Promise((resolve) => {\n\t\t\t\t\t\t\tif (!val) return resolve(false);\n\n\t\t\t\t\t\t\tconst split = val.split(':');\n\n\t\t\t\t\t\t\tif (split.length !== 2) return resolve(false);\n\t\t\t\t\t\t\tif (this.client.registry.findCommands(val).length > 0)\n\t\t\t\t\t\t\t\treturn resolve('That command is already registered.');\n\n\t\t\t\t\t\t\tconst cmdPath = this.client.registry.resolveCommandPath(\n\t\t\t\t\t\t\t\tsplit[0],\n\t\t\t\t\t\t\t\tsplit[1],\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\taccess(cmdPath, constants.R_OK, (err) =>\n\t\t\t\t\t\t\t\terr ? resolve(false) : resolve(true),\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}),\n\t\t\t\t\tparse: (val) => {\n\t\t\t\t\t\tconst split = val.split(':');\n\t\t\t\t\t\tconst cmdPath = this.client.registry.resolveCommandPath(\n\t\t\t\t\t\t\tsplit[0],\n\t\t\t\t\t\t\tsplit[1],\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdelete require.cache[cmdPath];\n\n\t\t\t\t\t\treturn require(cmdPath);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(msg, { command }) {\n\t\tthis.client.registry.registerCommand(command);\n\n\t\tconst cmd = this.client.registry.commands.last();\n\n\t\tif (this.client.shard) {\n\t\t\ttry {\n\t\t\t\tawait this.client.shard.broadcastEval(`\n\t\t\t\t\tconst ids = [${this.client.shard.shards.join(',')}];\n\n\t\t\t\t\tif (!this.shard.shards.some(id => ids.includes(id))) {\n\t\t\t\t\t\tconst cmdPath = this.registry.resolveCommandPath('${cmd.groupID}', '${cmd.name}');\n\n\t\t\t\t\t\tdelete require.cache[cmdPath];\n\t\t\t\t\t\tthis.registry.registerCommand(require(cmdPath));\n\t\t\t\t\t}\n\t\t\t\t`);\n\t\t\t} catch (err) {\n\t\t\t\tthis.client.emit('warn', 'Error when broadcasting command load to other shards.');\n\t\t\t\tthis.client.emit('error', err);\n\n\t\t\t\tawait msg.reply(`Loaded \\`${cmd.name}\\` command, but failed to load on other shards.`);\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tawait msg.reply(`Loaded \\`${cmd.name}\\` command${this.client.shard ? ' on all shards' : ''}.`);\n\n\t\treturn null;\n\t}\n};\n"]}