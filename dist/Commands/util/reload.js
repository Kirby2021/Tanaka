const{Command:Command}=require("discord.js-commando");module.exports=class extends Command{constructor(a){super(a,{name:"reload",aliases:["reload-cmd","reload-command"],group:"util",memberName:"reload",description:"Reloads a command or command group.",ownerOnly:!0,guarded:!0,args:[{key:"cmdOrGrp",label:"command/group",prompt:"Which command or group would you like to reload?",type:"group|command"}]})}async run(a,{cmdOrGrp:o}){const r=Boolean(o.groupID);if(o.reload(),this.client.shard)try{await this.client.shard.broadcastEval(`\n\t\t\t\t\tconst ids = [${this.client.shard.shards.join(",")}];\n\n\t\t\t\t\tif (!this.shard.shards.some(id => ids.includes(id))) this.registry.${r?"commands":"groups"}.get('${r?o.name:o.id}').reload();\n\t\t\t\t`)}catch(e){return this.client.emit("warn","Error when broadcasting command reload to other shards."),this.client.emit("error",e),r?await a.reply(`Reloaded \`${o.name}\` command, but failed to reload on other shards.`):await a.reply(`Reloaded all of the commands in the \`${o.name}\` group, but failed to reload on other shards.`),null}return r?await a.reply(`Reloaded \`${o.name}\` command${this.client.shard?" on all shards":""}.`):await a.reply(`Reloaded all of the commands in the \`${o.name}\` group${this.client.shard?" on all shards":""}.`),null}};
//# sourceMappingURL=reload.js.map
