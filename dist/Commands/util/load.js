const{Command:Command}=require("discord.js-commando"),{access:access,constants:constants}=require("fs");module.exports=class extends Command{constructor(t){super(t,{name:"load",aliases:["load-command","load-cmd"],group:"util",memberName:"load",description:"Loads a new command.",ownerOnly:!0,guarded:!0,args:[{key:"command",prompt:"Which command would you like to load?",validate:t=>new Promise((e=>{if(!t)return e(!1);const r=t.split(":");if(2!==r.length)return e(!1);if(this.client.registry.findCommands(t).length>0)return e("That command is already registered.");const s=this.client.registry.resolveCommandPath(r[0],r[1]);return access(s,constants.R_OK,(t=>e(!t))),null})),parse:t=>{const e=t.split(":"),r=this.client.registry.resolveCommandPath(e[0],e[1]);return delete require.cache[r],require(r)}}]})}async run(t,{command:e}){this.client.registry.registerCommand(e);const r=this.client.registry.commands.last();if(this.client.shard)try{await this.client.shard.broadcastEval(`\n\t\t\t\t\tconst ids = [${this.client.shard.shards.join(",")}];\n\n\t\t\t\t\tif (!this.shard.shards.some(id => ids.includes(id))) {\n\t\t\t\t\t\tconst cmdPath = this.registry.resolveCommandPath('${r.groupID}', '${r.name}');\n\n\t\t\t\t\t\tdelete require.cache[cmdPath];\n\t\t\t\t\t\tthis.registry.registerCommand(require(cmdPath));\n\t\t\t\t\t}\n\t\t\t\t`)}catch(e){return this.client.emit("warn","Error when broadcasting command load to other shards."),this.client.emit("error",e),await t.reply(`Loaded \`${r.name}\` command, but failed to load on other shards.`),null}return await t.reply(`Loaded \`${r.name}\` command${this.client.shard?" on all shards":""}.`),null}};
//# sourceMappingURL=load.js.map
