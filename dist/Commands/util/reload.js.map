{"version":3,"sources":["Commands/util/reload.js"],"names":["Command","require","module","exports","[object Object]","client","super","name","aliases","group","memberName","description","ownerOnly","guarded","args","key","label","prompt","type","msg","cmdOrGrp","isCmd","Boolean","groupID","reload","this","shard","broadcastEval","shards","join","id","err","emit","reply"],"mappings":"AAAA,MAAMA,QAAEA,SAAYC,QAAQ,uBAE5BC,OAAOC,QAAU,cAA4BH,QAC5CI,YAAYC,GACXC,MAAMD,EAAQ,CACbE,KAAM,SACNC,QAAS,CAAC,aAAc,kBACxBC,MAAO,OACPC,WAAY,SACZC,YAAa,sCACbC,WAAW,EACXC,SAAS,EACTC,KAAM,CACL,CACCC,IAAK,WACLC,MAAO,gBACPC,OAAQ,mDACRC,KAAM,oBAMVd,UAAUe,GAAKC,SAAEA,IAChB,MAAMC,EAAQC,QAAQF,EAASG,SAI/B,GAFAH,EAASI,SAELC,KAAKpB,OAAOqB,MACf,UACOD,KAAKpB,OAAOqB,MAAMC,cAAc,4BACtBF,KAAKpB,OAAOqB,MAAME,OAAOC,KAAK,0FAEwBR,EAAQ,WAAa,iBAC1FA,EAAQD,EAASb,KAAOa,EAASU,4BAGjC,MAAOC,GAaR,OAZAN,KAAKpB,OAAO2B,KAAK,OAAQ,2DACzBP,KAAKpB,OAAO2B,KAAK,QAASD,GAEtBV,QACGF,EAAIc,MACT,cAAcb,EAASb,+DAGlBY,EAAIc,MACT,yCAAyCb,EAASb,uDAG7C,KAeT,OAXIc,QACGF,EAAIc,MACT,cAAcb,EAASb,iBAAiBkB,KAAKpB,OAAOqB,MAAQ,iBAAmB,aAG1EP,EAAIc,MACT,yCAAyCb,EAASb,eACjDkB,KAAKpB,OAAOqB,MAAQ,iBAAmB,OAInC","file":"reload.js","sourcesContent":["const { Command } = require('discord.js-commando');\n\nmodule.exports = class ReloadCommand extends Command {\n\tconstructor(client) {\n\t\tsuper(client, {\n\t\t\tname: 'reload',\n\t\t\taliases: ['reload-cmd', 'reload-command'],\n\t\t\tgroup: 'util',\n\t\t\tmemberName: 'reload',\n\t\t\tdescription: 'Reloads a command or command group.',\n\t\t\townerOnly: true,\n\t\t\tguarded: true,\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'cmdOrGrp',\n\t\t\t\t\tlabel: 'command/group',\n\t\t\t\t\tprompt: 'Which command or group would you like to reload?',\n\t\t\t\t\ttype: 'group|command',\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tasync run(msg, { cmdOrGrp }) {\n\t\tconst isCmd = Boolean(cmdOrGrp.groupID);\n\n\t\tcmdOrGrp.reload();\n\n\t\tif (this.client.shard) {\n\t\t\ttry {\n\t\t\t\tawait this.client.shard.broadcastEval(`\n\t\t\t\t\tconst ids = [${this.client.shard.shards.join(',')}];\n\n\t\t\t\t\tif (!this.shard.shards.some(id => ids.includes(id))) this.registry.${isCmd ? 'commands' : 'groups'}.get('${\n\t\t\t\t\tisCmd ? cmdOrGrp.name : cmdOrGrp.id\n\t\t\t\t}').reload();\n\t\t\t\t`);\n\t\t\t} catch (err) {\n\t\t\t\tthis.client.emit('warn', 'Error when broadcasting command reload to other shards.');\n\t\t\t\tthis.client.emit('error', err);\n\n\t\t\t\tif (isCmd)\n\t\t\t\t\tawait msg.reply(\n\t\t\t\t\t\t`Reloaded \\`${cmdOrGrp.name}\\` command, but failed to reload on other shards.`,\n\t\t\t\t\t);\n\t\t\t\telse\n\t\t\t\t\tawait msg.reply(\n\t\t\t\t\t\t`Reloaded all of the commands in the \\`${cmdOrGrp.name}\\` group, but failed to reload on other shards.`,\n\t\t\t\t\t);\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (isCmd)\n\t\t\tawait msg.reply(\n\t\t\t\t`Reloaded \\`${cmdOrGrp.name}\\` command${this.client.shard ? ' on all shards' : ''}.`,\n\t\t\t);\n\t\telse\n\t\t\tawait msg.reply(\n\t\t\t\t`Reloaded all of the commands in the \\`${cmdOrGrp.name}\\` group${\n\t\t\t\t\tthis.client.shard ? ' on all shards' : ''\n\t\t\t\t}.`,\n\t\t\t);\n\n\t\treturn null;\n\t}\n};\n"]}