{"version":3,"sources":["Web/index.js"],"names":["Client","require","express","cookies","helmet","morgan","path","cors","app","client","id","process","env","CLIENT_ID","secret","CLIENT_SECRET","redirectURI","scopes","module","exports","c","use","contentSecurityPolicy","json","urlencoded","extended","text","static","join","__dirname","set","get","async","req","res","key","userCount","guilds","cache","reduce","a","b","memberCount","toLocaleString","guildCount","size","channelCount","channels","commandCount","registry","commands","shardCount","shard","count","ping","Math","round","ws","data","getUser","render","_","redirect","moment","authCodeLink","url","code","query","toString","getAccess","cookie","clearCookie","undefined","listen","PORT","logger","info"],"mappings":"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","file":"index.js","sourcesContent":["const { Client } = require('@2pg/oauth');\nconst express = require('express');\nconst cookies = require('cookies');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst path = require('path');\nconst cors = require('cors');\n\nconst app = express();\nconst client = new Client({\n\tid: process.env.CLIENT_ID,\n\tsecret: process.env.CLIENT_SECRET,\n\tredirectURI: 'https://tanaka-bot.me/auth/callback',\n\tscopes: ['identify'],\n});\n\n// eslint-disable-next-line valid-jsdoc\n/**\n *  @param {import('../Structures/Client')} c The client\n */\nmodule.exports = (c) => {\n\tapp.use(cors());\n\tapp.use(helmet({ contentSecurityPolicy: false }));\n\tapp.use(express.json());\n\tapp.use(express.urlencoded({ extended: true }));\n\tapp.use(express.text());\n\tapp.use(cookies.express(['I', 'store', 'login', 'sessions.']));\n\tapp.use(morgan('combined'));\n\tapp.use('/static', express.static(path.join(__dirname, 'static')));\n\n\tapp.set('view engine', 'ejs');\n\tapp.set('trust proxy', true);\n\tapp.set('json spaces', 8);\n\tapp.set('views', path.join(__dirname, 'views'));\n\n\tapp.get('/', async (req, res) => {\n\t\tconst key = req.cookies.get('discordToken');\n\n\t\tconst userCount = c.guilds.cache.reduce((a, b) => a + b.memberCount, 0).toLocaleString();\n\t\tconst guildCount = c.guilds.cache.size.toLocaleString();\n\t\tconst channelCount = c.channels.cache.size.toLocaleString();\n\t\tconst commandCount = c.registry.commands.size.toLocaleString();\n\t\tconst shardCount = c.shard ? c.shard.count.toLocaleString() : '1';\n\t\tconst ping = Math.round(c.ws.ping);\n\n\t\tconst data = key ? await client.getUser(key) : null;\n\n\t\tres.render('index', {\n\t\t\tdata,\n\t\t\tuserCount,\n\t\t\tguildCount,\n\t\t\tchannelCount,\n\t\t\tcommandCount,\n\t\t\tshardCount,\n\t\t\tping,\n\t\t});\n\t});\n\n\tapp.get('/invite', (_, res) =>\n\t\tres.redirect(\n\t\t\t302,\n\t\t\t'https://discord.com/api/oauth2/authorize?client_id=804605929944645672&permissions=641064257&redirect_uri=https%3A%2F%2Ftanaka.1chi.tk%2Fauth%2Fcallback&response_type=code&scope=identify%20bot',\n\t\t),\n\t);\n\n\tapp.get('/discord', (_, res) => res.redirect(302, 'https://discord.gg/zGvtAnGhdP'));\n\n\tapp.get('/github', (_, res) => res.redirect(302, 'https://github.com/1chiSensei/Tanaka'));\n\n\tapp.get('/commands', async (req, res) => {\n\t\tconst key = req.cookies.get('discordToken');\n\n\t\tres.render('commands', { data: key ? await client.getUser(key) : null });\n\t});\n\n\tapp.get('/legal', async (req, res) => {\n\t\tconst key = req.cookies.get('discordToken');\n\n\t\tres.render('legal', { data: key ? await client.getUser(key) : null });\n\t});\n\n\tapp.get('/profile', async (req, res) => {\n\t\tconst key = req.cookies.get('discordToken');\n\n\t\tres.render('profile', {\n\t\t\tdata: key ? await client.getUser(key) : null,\n\t\t\tmoment: require('moment'),\n\t\t});\n\t});\n\n\tapp.get('/auth/login', (_, res) => res.redirect(302, client.authCodeLink.url));\n\n\tapp.get('/auth/callback', async (req, res) => {\n\t\tif (req.cookies.get('discordToken')) return res.redirect(302, '/');\n\n\t\tconst code = req.query.code.toString();\n\t\tconst key = await client.getAccess(code);\n\n\t\tres.cookie('discordToken', key).redirect('/');\n\t});\n\n\tapp.get('/auth/logout', (_, res) => {\n\t\tres.clearCookie('discordToken', undefined);\n\n\t\tres.redirect(302, '/');\n\t});\n\n\tapp.listen(process.env.PORT || 3000, () => c.logger.info('Website is online!'));\n};\n"]}