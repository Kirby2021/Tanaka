{"version":3,"sources":["index.js"],"names":["MongoDBProvider","require","MongoClient","Client","path","client","setProvider","connect","db","url","useUnifiedTopology","useNewUrlParser","then","c","registry","registerDefaultTypes","registerGroups","id","name","registerDefaultGroups","registerDefaultCommands","unknownCommand","help","eval","ping","registerCommandsIn","join","__dirname","once","statuses","guilds","cache","reduce","a","b","memberCount","commands","size","status","Math","floor","random","length","setInterval","user","setActivity","type","logger","info","tag","on","debug","e","error","stack","login"],"mappings":"AAAA,MAAMA,gBAAEA,iBAAoBC,QAAQ,4BAC9BC,YAAEA,aAAgBD,QAAQ,WAC1BE,OAASF,QAAQ,uBACjBG,KAAOH,QAAQ,QAEfI,OAAS,IAAIF,OAEnBE,OAAOC,YACNJ,YAAYK,QAAQF,OAAOG,GAAGC,IAAK,CAClCC,oBAAoB,EACpBC,iBAAiB,IACfC,MAAMC,GAAM,IAAIb,gBAAgBa,EAAG,aAGvCR,OAAOS,SACLC,uBACAC,eAAe,CACf,CAAEC,GAAI,OAAQC,KAAM,WACpB,CAAED,GAAI,SAAUC,KAAM,mBACtB,CAAED,GAAI,OAAQC,KAAM,iBAEpBC,wBACAC,wBAAwB,CACxBC,gBAAgB,EAChBC,MAAM,EACNC,MAAM,EACNC,MAAM,IAENC,mBAAmBrB,KAAKsB,KAAKC,UAAW,aAE1CtB,OAAOuB,KAAK,SAAS,KACpB,MAIMC,EAAW,CAAC,GAJAxB,OAAOyB,OAAOC,MAAMC,QAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAEC,aAAa,WAIlC,GAHnB9B,OAAOS,SAASsB,SAASC,gBAGsB,GAFjDhC,OAAOyB,OAAOC,MAAMM,eAIjCC,EAAS,YAAYT,EAASU,KAAKC,MAAMD,KAAKE,SAAWZ,EAASa,WAExErC,OAAOsC,aAAY,IAAMtC,OAAOuC,KAAKC,YAAYP,EAAQ,CAAEQ,KAAM,cAAe,KAEhFzC,OAAO0C,OAAOC,KAAK,gBAAgB3C,OAAOuC,KAAKK,WAGhD5C,OAAO6C,GAAG,QAAS7C,OAAO0C,OAAOI,OAEjC9C,OAAO6C,GAAG,SAAUE,GAAM/C,OAAO0C,OAAOM,MAAMD,EAAEE,SAEhDjD,OAAOG,GAAGoB,KAAK,SAAS,IAAMvB,OAAO0C,OAAOC,KAAK,uBAEjD3C,OAAOG,GAAG0C,GAAG,QAAS7C,OAAO0C,OAAOI,OAEpC9C,OAAOG,GAAG0C,GAAG,SAAUE,GAAM/C,OAAO0C,OAAOM,MAAMD,EAAEE,SAEnDjD,OAAOkD","file":"index.js","sourcesContent":["const { MongoDBProvider } = require('commando-provider-mongo');\nconst { MongoClient } = require('mongodb');\nconst Client = require('./Structures/Client');\nconst path = require('path');\n\nconst client = new Client();\n\nclient.setProvider(\n\tMongoClient.connect(client.db.url, {\n\t\tuseUnifiedTopology: true,\n\t\tuseNewUrlParser: true,\n\t}).then((c) => new MongoDBProvider(c, 'tanaka')),\n);\n\nclient.registry\n\t.registerDefaultTypes()\n\t.registerGroups([\n\t\t{ id: 'util', name: 'Utility' },\n\t\t{ id: 'random', name: 'Random Response' },\n\t\t{ id: 'info', name: 'Information' },\n\t])\n\t.registerDefaultGroups()\n\t.registerDefaultCommands({\n\t\tunknownCommand: false,\n\t\thelp: false,\n\t\teval: false,\n\t\tping: false,\n\t})\n\t.registerCommandsIn(path.join(__dirname, 'Commands'));\n\nclient.once('ready', () => {\n\tconst userCount = client.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\tconst commandCount = client.registry.commands.size;\n\tconst guildCount = client.guilds.cache.size;\n\n\tconst statuses = [`${userCount} users`, `${commandCount} commands`, `${guildCount} guilds`];\n\n\tconst status = `t!help | ${statuses[Math.floor(Math.random() * statuses.length)]}`;\n\n\tclient.setInterval(() => client.user.setActivity(status, { type: 'WATCHING' }), 30000);\n\n\tclient.logger.info(`Logged in as ${client.user.tag}.`);\n});\n\nclient.on('debug', client.logger.debug);\n\nclient.on('error', (e) => client.logger.error(e.stack));\n\nclient.db.once('ready', () => client.logger.info('MongoDB is ready!'));\n\nclient.db.on('debug', client.logger.debug);\n\nclient.db.on('error', (e) => client.logger.error(e.stack));\n\nclient.login();\n"]}