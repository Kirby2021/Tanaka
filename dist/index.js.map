{"version":3,"sources":["index.js"],"names":["MessageEmbed","WebhookClient","require","KeyvProvider","htmlToText","Client","path","client","setProvider","db","registry","registerDefaultTypes","registerGroups","id","name","guarded","registerDefaultGroups","registerDefaultCommands","unknownCommand","help","eval","ping","registerTypesIn","join","__dirname","registerCommandsIn","once","async","setTimeout","manager","init","user","timers","fetchAll","statuses","guilds","cache","reduce","a","b","memberCount","commands","size","status","Math","floor","random","length","setInterval","setActivity","type","logger","info","tag","on","debug","e","error","stack","d","updateVoiceState","rss","item","forEach","guild","available","fetch","data","get","hook","token","embed","setTitle","title","setDescription","description","setURL","link","setColor","setImage","setTimestamp","send","node","options","identifier","message","player","track","channels","textChannel","requester","channel","color","destroy","login","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const { MessageEmbed, WebhookClient } = require('discord.js');\nconst KeyvProvider = require('commando-provider-keyv');\nconst { htmlToText } = require('html-to-text');\nconst Client = require('./Structures/Client');\nconst path = require('path');\n\nconst client = new Client();\n\nclient.setProvider(new KeyvProvider(client.db));\n\nclient.registry\n\t.registerDefaultTypes()\n\t.registerGroups([\n\t\t{ id: 'util', name: 'Utility', guarded: true },\n\t\t{ id: 'random', name: 'Random Response' },\n\t\t{ id: 'info', name: 'Information' },\n\t\t{ id: 'search', name: 'Search' },\n\t\t{ id: 'remind', name: 'Reminder' },\n\t\t{ id: 'anime-updates', name: 'Anime Updates' },\n\t\t{ id: 'codebin', name: 'Code Bins' },\n\t\t{ id: 'img', name: 'Image Manipulation' },\n\t\t{ id: 'music', name: 'Music' },\n\t])\n\t.registerDefaultGroups()\n\t.registerDefaultCommands({\n\t\tunknownCommand: false,\n\t\thelp: false,\n\t\teval: false,\n\t\tping: false,\n\t})\n\t.registerTypesIn(path.join(__dirname, 'Types'))\n\t.registerCommandsIn(path.join(__dirname, 'Commands'));\n\nclient.once('ready', async () => {\n\tclient.setTimeout(() => client.manager.init(client.user.id), 5000);\n\n\tawait client.timers.fetchAll();\n\n\tconst userCount = client.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\tconst commandCount = client.registry.commands.size;\n\tconst guildCount = client.guilds.cache.size;\n\n\tconst statuses = [\n\t\t`${userCount} users`,\n\t\t`${commandCount} commands`,\n\t\t`${guildCount} guilds`,\n\t\t'https://tanaka.1chi.tk',\n\t];\n\n\tconst status = `t!help | ${statuses[Math.floor(Math.random() * statuses.length)]}`;\n\n\tclient.setInterval(() => client.user.setActivity(status, { type: 'WATCHING' }), 30000);\n\n\tclient.logger.info(`Logged in as ${client.user.tag}.`);\n});\n\nclient.on('debug', client.logger.debug);\n\nclient.on('error', (e) => client.logger.error(e.stack));\n\nclient.on('raw', (d) => client.manager.updateVoiceState(d));\n\nclient.db.on('error', (e) => client.logger.error(e));\n\nclient.rss.on('item:new:anime', (item) => {\n\tclient.guilds.cache.forEach(async (guild) => {\n\t\tif (!guild.available) guild = await client.guilds.fetch(guild.id);\n\t\tconst data = await client.db.get(`animeUpdates-${guild.id}`);\n\n\t\tif (data === null) return false;\n\n\t\tconst hook = new WebhookClient(data.id, data.token);\n\t\tconst embed = new MessageEmbed()\n\t\t\t.setTitle(`**${item.title}**`)\n\t\t\t.setDescription(htmlToText(item.description))\n\t\t\t.setURL(item.link)\n\t\t\t.setColor('RANDOM')\n\t\t\t.setImage('https://i.imgur.com/R3JCtNK.jpg')\n\t\t\t.setTimestamp();\n\n\t\thook.send(embed);\n\t});\n});\n\nclient.manager.on('nodeConnect', (node) => client.logger.info(`Node \"${node.options.identifier}\" connected.`));\n\nclient.manager.on('nodeError', (node, error) =>\n\tclient.logger.error(`Node \"${node.options.identifier}\" encountered an error: ${error.message}.`),\n);\n\nclient.manager.on('trackStart', (player, track) => {\n\tconst channel = client.channels.cache.get(player.textChannel);\n\n\tchannel.send(`Now playing: \\`${track.title}\\`, requested by ${track.requester.tag}`);\n});\n\nclient.manager.on('queueEnd', (player) => {\n\tconst channel = client.channels.cache.get(player.textChannel);\n\n\tconst embed = new MessageEmbed({ description: 'The queue has ended.', color: 'RANDOM' });\n\n\tchannel.send(embed);\n\tplayer.destroy();\n});\n\nclient.login();\n\nmodule.exports = client;\n"]}