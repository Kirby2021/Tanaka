{"version":3,"sources":["index.js"],"names":["MongoDBProvider","require","MessageEmbed","WebhookClient","htmlToText","Client","MongoClient","path","client","setProvider","connect","db","url","useUnifiedTopology","useNewUrlParser","then","c","registry","registerDefaultTypes","registerGroups","id","name","guarded","registerDefaultGroups","registerDefaultCommands","unknownCommand","help","eval","ping","registerTypesIn","join","__dirname","registerCommandsIn","once","async","timers","fetchAll","statuses","guilds","cache","reduce","a","b","memberCount","commands","size","status","Math","floor","random","length","setInterval","user","setActivity","type","logger","info","tag","on","debug","e","error","stack","rss","item","forEach","guild","data","get","hook","token","embed","setTitle","title","setDescription","description","setURL","link","setColor","setImage","setTimestamp","send","login"],"mappings":"AAAA,MAAMA,gBAAEA,iBAAoBC,QAAQ,4BAC9BC,aAAEA,aAAYC,cAAEA,eAAkBF,QAAQ,eAC1CG,WAAEA,YAAeH,QAAQ,gBACzBI,OAASJ,QAAQ,wBACjBK,YAAEA,aAAgBL,QAAQ,WAC1BM,KAAON,QAAQ,QAEfO,OAAS,IAAIH,OAEnBG,OAAOC,YACNH,YAAYI,QAAQF,OAAOG,GAAGC,IAAK,CAClCC,oBAAoB,EACpBC,iBAAiB,IACfC,MAAMC,GAAM,IAAIhB,gBAAgBgB,EAAG,aAGvCR,OAAOS,SACLC,uBACAC,eAAe,CACf,CAAEC,GAAI,OAAQC,KAAM,UAAWC,SAAS,GACxC,CAAEF,GAAI,SAAUC,KAAM,mBACtB,CAAED,GAAI,OAAQC,KAAM,eACpB,CAAED,GAAI,SAAUC,KAAM,UACtB,CAAED,GAAI,SAAUC,KAAM,YACtB,CAAED,GAAI,gBAAiBC,KAAM,iBAC7B,CAAED,GAAI,UAAWC,KAAM,aACvB,CAAED,GAAI,MAAOC,KAAM,wBAEnBE,wBACAC,wBAAwB,CACxBC,gBAAgB,EAChBC,MAAM,EACNC,MAAM,EACNC,MAAM,IAENC,gBAAgBtB,KAAKuB,KAAKC,UAAW,UACrCC,mBAAmBzB,KAAKuB,KAAKC,UAAW,aAE1CvB,OAAOyB,KAAK,SAASC,gBACd1B,OAAO2B,OAAOC,WAEpB,MAIMC,EAAW,CAAC,GAJA7B,OAAO8B,OAAOC,MAAMC,QAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAEC,aAAa,WAIlC,GAHnBnC,OAAOS,SAAS2B,SAASC,gBAGsB,GAFjDrC,OAAO8B,OAAOC,MAAMM,eAIjCC,EAAS,YAAYT,EAASU,KAAKC,MAAMD,KAAKE,SAAWZ,EAASa,WAExE1C,OAAO2C,aAAY,IAAM3C,OAAO4C,KAAKC,YAAYP,EAAQ,CAAEQ,KAAM,cAAe,KAEhF9C,OAAO+C,OAAOC,KAAK,gBAAgBhD,OAAO4C,KAAKK,WAGhDjD,OAAOkD,GAAG,QAASlD,OAAO+C,OAAOI,OAEjCnD,OAAOkD,GAAG,SAAUE,GAAMpD,OAAO+C,OAAOM,MAAMD,EAAEE,SAEhDtD,OAAOG,GAAGsB,KAAK,SAAS,IAAMzB,OAAO+C,OAAOC,KAAK,uBAEjDhD,OAAOG,GAAG+C,GAAG,QAASlD,OAAO+C,OAAOI,OAEpCnD,OAAOG,GAAG+C,GAAG,SAAUE,GAAMpD,OAAO+C,OAAOM,MAAMD,EAAEE,SAEnDtD,OAAOuD,IAAIL,GAAG,kBAAmBM,IAChCxD,OAAO8B,OAAOC,MAAM0B,SAAQ/B,MAAOgC,IAClC,MAAMC,QAAa3D,OAAOG,GAAGyD,IAAI,gBAAgBF,EAAM9C,MAEvD,GAAa,OAAT+C,EAAe,OAAO,EAE1B,MAAME,EAAO,IAAIlE,cAAcgE,EAAK/C,GAAI+C,EAAKG,OACvCC,GAAQ,IAAIrE,cAChBsE,SAAS,KAAKR,EAAKS,WACnBC,eAAetE,WAAW4D,EAAKW,cAC/BC,OAAOZ,EAAKa,MACZC,SAAS,UACTC,SAAS,kEACTC,eAEFX,EAAKY,KAAKV,SAIZ/D,OAAO0E","file":"index.js","sourcesContent":["const { MongoDBProvider } = require('commando-provider-mongo');\nconst { MessageEmbed, WebhookClient } = require('discord.js');\nconst { htmlToText } = require('html-to-text');\nconst Client = require('./Structures/Client');\nconst { MongoClient } = require('mongodb');\nconst path = require('path');\n\nconst client = new Client();\n\nclient.setProvider(\n\tMongoClient.connect(client.db.url, {\n\t\tuseUnifiedTopology: true,\n\t\tuseNewUrlParser: true,\n\t}).then((c) => new MongoDBProvider(c, 'tanaka')),\n);\n\nclient.registry\n\t.registerDefaultTypes()\n\t.registerGroups([\n\t\t{ id: 'util', name: 'Utility', guarded: true },\n\t\t{ id: 'random', name: 'Random Response' },\n\t\t{ id: 'info', name: 'Information' },\n\t\t{ id: 'search', name: 'Search' },\n\t\t{ id: 'remind', name: 'Reminder' },\n\t\t{ id: 'anime-updates', name: 'Anime Updates' },\n\t\t{ id: 'codebin', name: 'Code Bins' },\n\t\t{ id: 'img', name: 'Image Manipulation' },\n\t])\n\t.registerDefaultGroups()\n\t.registerDefaultCommands({\n\t\tunknownCommand: false,\n\t\thelp: false,\n\t\teval: false,\n\t\tping: false,\n\t})\n\t.registerTypesIn(path.join(__dirname, 'Types'))\n\t.registerCommandsIn(path.join(__dirname, 'Commands'));\n\nclient.once('ready', async () => {\n\tawait client.timers.fetchAll();\n\n\tconst userCount = client.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\tconst commandCount = client.registry.commands.size;\n\tconst guildCount = client.guilds.cache.size;\n\n\tconst statuses = [`${userCount} users`, `${commandCount} commands`, `${guildCount} guilds`];\n\n\tconst status = `t!help | ${statuses[Math.floor(Math.random() * statuses.length)]}`;\n\n\tclient.setInterval(() => client.user.setActivity(status, { type: 'WATCHING' }), 30000);\n\n\tclient.logger.info(`Logged in as ${client.user.tag}.`);\n});\n\nclient.on('debug', client.logger.debug);\n\nclient.on('error', (e) => client.logger.error(e.stack));\n\nclient.db.once('ready', () => client.logger.info('MongoDB is ready!'));\n\nclient.db.on('debug', client.logger.debug);\n\nclient.db.on('error', (e) => client.logger.error(e.stack));\n\nclient.rss.on('item:new:anime', (item) => {\n\tclient.guilds.cache.forEach(async (guild) => {\n\t\tconst data = await client.db.get(`animeUpdates-${guild.id}`);\n\n\t\tif (data === null) return false;\n\n\t\tconst hook = new WebhookClient(data.id, data.token);\n\t\tconst embed = new MessageEmbed()\n\t\t\t.setTitle(`**${item.title}**`)\n\t\t\t.setDescription(htmlToText(item.description))\n\t\t\t.setURL(item.link)\n\t\t\t.setColor('RANDOM')\n\t\t\t.setImage('https://kevinpennyfeather.files.wordpress.com/2018/03/logo.jpg')\n\t\t\t.setTimestamp();\n\n\t\thook.send(embed);\n\t});\n});\n\nclient.login();\n"]}