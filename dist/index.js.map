{"version":3,"sources":["index.js"],"names":["MongoDBProvider","require","MessageEmbed","WebhookClient","htmlToText","Client","MongoClient","path","client","setProvider","connect","db","url","useUnifiedTopology","useNewUrlParser","then","c","registry","registerDefaultTypes","registerGroups","id","name","guarded","registerDefaultGroups","registerDefaultCommands","unknownCommand","help","eval","ping","registerTypesIn","join","__dirname","registerCommandsIn","once","async","setTimeout","manager","init","user","timers","fetchAll","statuses","guilds","cache","reduce","a","b","memberCount","commands","size","status","Math","floor","random","length","setInterval","setActivity","type","logger","info","tag","on","debug","e","error","stack","d","updateVoiceState","rss","item","forEach","guild","data","get","hook","token","embed","setTitle","title","setDescription","description","setURL","link","setColor","setImage","setTimestamp","send","node","options","identifier","message","player","track","channels","textChannel","requester","channel","color","destroy","login","module","exports"],"mappings":"AAAA,MAAMA,gBAAEA,iBAAoBC,QAAQ,4BAC9BC,aAAEA,aAAYC,cAAEA,eAAkBF,QAAQ,eAC1CG,WAAEA,YAAeH,QAAQ,gBACzBI,OAASJ,QAAQ,wBACjBK,YAAEA,aAAgBL,QAAQ,WAC1BM,KAAON,QAAQ,QAEfO,OAAS,IAAIH,OAEnBG,OAAOC,YACNH,YAAYI,QAAQF,OAAOG,GAAGC,IAAK,CAClCC,oBAAoB,EACpBC,iBAAiB,IACfC,MAAMC,GAAM,IAAIhB,gBAAgBgB,EAAG,aAGvCR,OAAOS,SACLC,uBACAC,eAAe,CACf,CAAEC,GAAI,OAAQC,KAAM,UAAWC,SAAS,GACxC,CAAEF,GAAI,SAAUC,KAAM,mBACtB,CAAED,GAAI,OAAQC,KAAM,eACpB,CAAED,GAAI,SAAUC,KAAM,UACtB,CAAED,GAAI,SAAUC,KAAM,YACtB,CAAED,GAAI,gBAAiBC,KAAM,iBAC7B,CAAED,GAAI,UAAWC,KAAM,aACvB,CAAED,GAAI,MAAOC,KAAM,sBACnB,CAAED,GAAI,QAASC,KAAM,WAErBE,wBACAC,wBAAwB,CACxBC,gBAAgB,EAChBC,MAAM,EACNC,MAAM,EACNC,MAAM,IAENC,gBAAgBtB,KAAKuB,KAAKC,UAAW,UACrCC,mBAAmBzB,KAAKuB,KAAKC,UAAW,aAE1CvB,OAAOyB,KAAK,SAASC,UACpB1B,OAAO2B,YAAW,IAAM3B,OAAO4B,QAAQC,KAAK7B,OAAO8B,KAAKlB,KAAK,WAEvDZ,OAAO+B,OAAOC,WAEpB,MAIMC,EAAW,CAChB,GALiBjC,OAAOkC,OAAOC,MAAMC,QAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAEC,aAAa,WAMzE,GALoBvC,OAAOS,SAAS+B,SAASC,gBAM7C,GALkBzC,OAAOkC,OAAOC,MAAMM,cAMtC,0BAGKC,EAAS,YAAYT,EAASU,KAAKC,MAAMD,KAAKE,SAAWZ,EAASa,WAExE9C,OAAO+C,aAAY,IAAM/C,OAAO8B,KAAKkB,YAAYN,EAAQ,CAAEO,KAAM,cAAe,KAEhFjD,OAAOkD,OAAOC,KAAK,gBAAgBnD,OAAO8B,KAAKsB,WAGhDpD,OAAOqD,GAAG,QAASrD,OAAOkD,OAAOI,OAEjCtD,OAAOqD,GAAG,SAAUE,GAAMvD,OAAOkD,OAAOM,MAAMD,EAAEE,SAEhDzD,OAAOqD,GAAG,OAAQK,GAAM1D,OAAO4B,QAAQ+B,iBAAiBD,KAExD1D,OAAOG,GAAGsB,KAAK,SAAS,IAAMzB,OAAOkD,OAAOC,KAAK,uBAEjDnD,OAAOG,GAAGkD,GAAG,QAASrD,OAAOkD,OAAOI,OAEpCtD,OAAOG,GAAGkD,GAAG,SAAUE,GAAMvD,OAAOkD,OAAOM,MAAMD,EAAEE,SAEnDzD,OAAO4D,IAAIP,GAAG,kBAAmBQ,IAChC7D,OAAOkC,OAAOC,MAAM2B,SAAQpC,MAAOqC,IAClC,MAAMC,QAAahE,OAAOG,GAAG8D,IAAI,gBAAgBF,EAAMnD,MAEvD,GAAa,OAAToD,EAAe,OAAO,EAE1B,MAAME,EAAO,IAAIvE,cAAcqE,EAAKpD,GAAIoD,EAAKG,OACvCC,GAAQ,IAAI1E,cAChB2E,SAAS,KAAKR,EAAKS,WACnBC,eAAe3E,WAAWiE,EAAKW,cAC/BC,OAAOZ,EAAKa,MACZC,SAAS,UACTC,SAAS,kEACTC,eAEFX,EAAKY,KAAKV,SAIZpE,OAAO4B,QAAQyB,GAAG,eAAgB0B,GAAS/E,OAAOkD,OAAOC,KAAK,SAAS4B,EAAKC,QAAQC,4BAEpFjF,OAAO4B,QAAQyB,GAAG,aAAa,CAAC0B,EAAMvB,IACrCxD,OAAOkD,OAAOM,MAAM,SAASuB,EAAKC,QAAQC,qCAAqCzB,EAAM0B,cAGtFlF,OAAO4B,QAAQyB,GAAG,cAAc,CAAC8B,EAAQC,KACxBpF,OAAOqF,SAASlD,MAAM8B,IAAIkB,EAAOG,aAEzCR,KAAK,kBAAkBM,EAAMd,yBAAyBc,EAAMG,UAAUnC,UAG/EpD,OAAO4B,QAAQyB,GAAG,YAAa8B,IAC9B,MAAMK,EAAUxF,OAAOqF,SAASlD,MAAM8B,IAAIkB,EAAOG,aAE3ClB,EAAQ,IAAI1E,aAAa,CAAE8E,YAAa,uBAAwBiB,MAAO,WAE7ED,EAAQV,KAAKV,GACbe,EAAOO,aAGR1F,OAAO2F,QAEPC,OAAOC,QAAU7F","file":"index.js","sourcesContent":["const { MongoDBProvider } = require('commando-provider-mongo');\nconst { MessageEmbed, WebhookClient } = require('discord.js');\nconst { htmlToText } = require('html-to-text');\nconst Client = require('./Structures/Client');\nconst { MongoClient } = require('mongodb');\nconst path = require('path');\n\nconst client = new Client();\n\nclient.setProvider(\n\tMongoClient.connect(client.db.url, {\n\t\tuseUnifiedTopology: true,\n\t\tuseNewUrlParser: true,\n\t}).then((c) => new MongoDBProvider(c, 'tanaka')),\n);\n\nclient.registry\n\t.registerDefaultTypes()\n\t.registerGroups([\n\t\t{ id: 'util', name: 'Utility', guarded: true },\n\t\t{ id: 'random', name: 'Random Response' },\n\t\t{ id: 'info', name: 'Information' },\n\t\t{ id: 'search', name: 'Search' },\n\t\t{ id: 'remind', name: 'Reminder' },\n\t\t{ id: 'anime-updates', name: 'Anime Updates' },\n\t\t{ id: 'codebin', name: 'Code Bins' },\n\t\t{ id: 'img', name: 'Image Manipulation' },\n\t\t{ id: 'music', name: 'Music' },\n\t])\n\t.registerDefaultGroups()\n\t.registerDefaultCommands({\n\t\tunknownCommand: false,\n\t\thelp: false,\n\t\teval: false,\n\t\tping: false,\n\t})\n\t.registerTypesIn(path.join(__dirname, 'Types'))\n\t.registerCommandsIn(path.join(__dirname, 'Commands'));\n\nclient.once('ready', async () => {\n\tclient.setTimeout(() => client.manager.init(client.user.id), 5000);\n\n\tawait client.timers.fetchAll();\n\n\tconst userCount = client.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\tconst commandCount = client.registry.commands.size;\n\tconst guildCount = client.guilds.cache.size;\n\n\tconst statuses = [\n\t\t`${userCount} users`,\n\t\t`${commandCount} commands`,\n\t\t`${guildCount} guilds`,\n\t\t'https://tanaka.1chi.tk',\n\t];\n\n\tconst status = `t!help | ${statuses[Math.floor(Math.random() * statuses.length)]}`;\n\n\tclient.setInterval(() => client.user.setActivity(status, { type: 'WATCHING' }), 30000);\n\n\tclient.logger.info(`Logged in as ${client.user.tag}.`);\n});\n\nclient.on('debug', client.logger.debug);\n\nclient.on('error', (e) => client.logger.error(e.stack));\n\nclient.on('raw', (d) => client.manager.updateVoiceState(d));\n\nclient.db.once('ready', () => client.logger.info('MongoDB is ready!'));\n\nclient.db.on('debug', client.logger.debug);\n\nclient.db.on('error', (e) => client.logger.error(e.stack));\n\nclient.rss.on('item:new:anime', (item) => {\n\tclient.guilds.cache.forEach(async (guild) => {\n\t\tconst data = await client.db.get(`animeUpdates-${guild.id}`);\n\n\t\tif (data === null) return false;\n\n\t\tconst hook = new WebhookClient(data.id, data.token);\n\t\tconst embed = new MessageEmbed()\n\t\t\t.setTitle(`**${item.title}**`)\n\t\t\t.setDescription(htmlToText(item.description))\n\t\t\t.setURL(item.link)\n\t\t\t.setColor('RANDOM')\n\t\t\t.setImage('https://kevinpennyfeather.files.wordpress.com/2018/03/logo.jpg')\n\t\t\t.setTimestamp();\n\n\t\thook.send(embed);\n\t});\n});\n\nclient.manager.on('nodeConnect', (node) => client.logger.info(`Node \"${node.options.identifier}\" connected.`));\n\nclient.manager.on('nodeError', (node, error) =>\n\tclient.logger.error(`Node \"${node.options.identifier}\" encountered an error: ${error.message}.`),\n);\n\nclient.manager.on('trackStart', (player, track) => {\n\tconst channel = client.channels.cache.get(player.textChannel);\n\n\tchannel.send(`Now playing: \\`${track.title}\\`, requested by ${track.requester.tag}`);\n});\n\nclient.manager.on('queueEnd', (player) => {\n\tconst channel = client.channels.cache.get(player.textChannel);\n\n\tconst embed = new MessageEmbed({ description: 'The queue has ended.', color: 'RANDOM' });\n\n\tchannel.send(embed);\n\tplayer.destroy();\n});\n\nclient.login();\n\nmodule.exports = client;\n"]}