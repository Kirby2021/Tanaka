{"version":3,"sources":["index.js"],"names":["MongoDBProvider","require","stripIndents","Client","MongoClient","convert","path","client","setProvider","connect","db","url","useUnifiedTopology","useNewUrlParser","then","c","registry","registerDefaultTypes","registerGroups","id","name","guarded","registerDefaultGroups","registerDefaultCommands","unknownCommand","help","eval","ping","registerTypesIn","join","__dirname","registerCommandsIn","once","async","timers","fetchAll","statuses","guilds","cache","reduce","a","b","memberCount","commands","size","status","Math","floor","random","length","setInterval","user","setActivity","type","logger","info","tag","on","debug","e","error","stack","rss","item","testWebhook","send","title","description","link","login"],"mappings":"AAAA,MAAMA,gBAAEA,iBAAoBC,QAAQ,4BAC9BC,aAAEA,cAAiBD,QAAQ,eAC3BE,OAASF,QAAQ,wBACjBG,YAAEA,aAAgBH,QAAQ,WAC1BI,QAAUJ,QAAQ,cAClBK,KAAOL,QAAQ,QAEfM,OAAS,IAAIJ,OAEnBI,OAAOC,YACNJ,YAAYK,QAAQF,OAAOG,GAAGC,IAAK,CAClCC,oBAAoB,EACpBC,iBAAiB,IACfC,MAAMC,GAAM,IAAIf,gBAAgBe,EAAG,aAGvCR,OAAOS,SACLC,uBACAC,eAAe,CACf,CAAEC,GAAI,OAAQC,KAAM,UAAWC,SAAS,GACxC,CAAEF,GAAI,SAAUC,KAAM,mBACtB,CAAED,GAAI,OAAQC,KAAM,eACpB,CAAED,GAAI,SAAUC,KAAM,UACtB,CAAED,GAAI,SAAUC,KAAM,cAEtBE,wBACAC,wBAAwB,CACxBC,gBAAgB,EAChBC,MAAM,EACNC,MAAM,EACNC,MAAM,IAENC,gBAAgBtB,KAAKuB,KAAKC,UAAW,UACrCC,mBAAmBzB,KAAKuB,KAAKC,UAAW,aAE1CvB,OAAOyB,KAAK,SAASC,gBACd1B,OAAO2B,OAAOC,WAEpB,MAIMC,EAAW,CAAC,GAJA7B,OAAO8B,OAAOC,MAAMC,QAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAEC,aAAa,WAIlC,GAHnBnC,OAAOS,SAAS2B,SAASC,gBAGsB,GAFjDrC,OAAO8B,OAAOC,MAAMM,eAIjCC,EAAS,YAAYT,EAASU,KAAKC,MAAMD,KAAKE,SAAWZ,EAASa,WAExE1C,OAAO2C,aAAY,IAAM3C,OAAO4C,KAAKC,YAAYP,EAAQ,CAAEQ,KAAM,cAAe,KAEhF9C,OAAO+C,OAAOC,KAAK,gBAAgBhD,OAAO4C,KAAKK,WAGhDjD,OAAOkD,GAAG,QAASlD,OAAO+C,OAAOI,OAEjCnD,OAAOkD,GAAG,SAAUE,GAAMpD,OAAO+C,OAAOM,MAAMD,EAAEE,SAEhDtD,OAAOG,GAAGsB,KAAK,SAAS,IAAMzB,OAAO+C,OAAOC,KAAK,uBAEjDhD,OAAOG,GAAG+C,GAAG,QAASlD,OAAO+C,OAAOI,OAEpCnD,OAAOG,GAAG+C,GAAG,SAAUE,GAAMpD,OAAO+C,OAAOM,MAAMD,EAAEE,SAEnDtD,OAAOuD,IAAIL,GAAG,kBAAmBM,IAChCxD,OAAOyD,YAAYC,KAAK/D,YAAY;MAC/B6D,EAAKG;;IAEP7D,QAAQ0D,EAAKI;;KAEZJ,EAAKK;OAIV7D,OAAO8D","file":"index.js","sourcesContent":["const { MongoDBProvider } = require('commando-provider-mongo');\nconst { stripIndents } = require('common-tags');\nconst Client = require('./Structures/Client');\nconst { MongoClient } = require('mongodb');\nconst convert = require('html-to-md');\nconst path = require('path');\n\nconst client = new Client();\n\nclient.setProvider(\n\tMongoClient.connect(client.db.url, {\n\t\tuseUnifiedTopology: true,\n\t\tuseNewUrlParser: true,\n\t}).then((c) => new MongoDBProvider(c, 'tanaka')),\n);\n\nclient.registry\n\t.registerDefaultTypes()\n\t.registerGroups([\n\t\t{ id: 'util', name: 'Utility', guarded: true },\n\t\t{ id: 'random', name: 'Random Response' },\n\t\t{ id: 'info', name: 'Information' },\n\t\t{ id: 'search', name: 'Search' },\n\t\t{ id: 'remind', name: 'Reminder' },\n\t])\n\t.registerDefaultGroups()\n\t.registerDefaultCommands({\n\t\tunknownCommand: false,\n\t\thelp: false,\n\t\teval: false,\n\t\tping: false,\n\t})\n\t.registerTypesIn(path.join(__dirname, 'Types'))\n\t.registerCommandsIn(path.join(__dirname, 'Commands'));\n\nclient.once('ready', async () => {\n\tawait client.timers.fetchAll();\n\n\tconst userCount = client.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\tconst commandCount = client.registry.commands.size;\n\tconst guildCount = client.guilds.cache.size;\n\n\tconst statuses = [`${userCount} users`, `${commandCount} commands`, `${guildCount} guilds`];\n\n\tconst status = `t!help | ${statuses[Math.floor(Math.random() * statuses.length)]}`;\n\n\tclient.setInterval(() => client.user.setActivity(status, { type: 'WATCHING' }), 30000);\n\n\tclient.logger.info(`Logged in as ${client.user.tag}.`);\n});\n\nclient.on('debug', client.logger.debug);\n\nclient.on('error', (e) => client.logger.error(e.stack));\n\nclient.db.once('ready', () => client.logger.info('MongoDB is ready!'));\n\nclient.db.on('debug', client.logger.debug);\n\nclient.db.on('error', (e) => client.logger.error(e.stack));\n\nclient.rss.on('item:new:anime', (item) => {\n\tclient.testWebhook.send(stripIndents`\n\t\t**${item.title}**\n\t\t\n\t\t${convert(item.description)}\n\n\t\t[${item.link}]\n\t`);\n});\n\nclient.login();\n"]}