{"version":3,"sources":["index.js"],"names":["MongoDBProvider","require","MessageEmbed","WebhookClient","didYouMean","default","htmlToText","Client","MongoClient","path","client","setProvider","connect","db","url","useUnifiedTopology","useNewUrlParser","then","c","registry","registerDefaultTypes","registerGroups","id","name","guarded","registerDefaultGroups","registerDefaultCommands","help","eval","ping","registerTypesIn","join","__dirname","registerCommandsIn","once","async","setTimeout","manager","init","user","timers","fetchAll","statuses","guilds","cache","reduce","a","b","memberCount","commands","size","status","Math","floor","random","length","setInterval","setActivity","type","logger","info","tag","on","msg","cmdList","map","mean","content","reply","guild","commandPrefix","Array","isArray","cm","debug","e","error","stack","d","updateVoiceState","rss","item","forEach","data","get","hook","token","embed","setTitle","title","setDescription","description","setURL","link","setColor","setImage","setTimestamp","send","node","options","identifier","message","player","track","channels","textChannel","requester","channel","color","destroy","login","module","exports"],"mappings":"AAAA,MAAMA,gBAAEA,iBAAoBC,QAAQ,4BAC9BC,aAAEA,aAAYC,cAAEA,eAAkBF,QAAQ,cAC1CG,WAAaH,QAAQ,eAAeI,SACpCC,WAAEA,YAAeL,QAAQ,gBACzBM,OAASN,QAAQ,wBACjBO,YAAEA,aAAgBP,QAAQ,WAC1BQ,KAAOR,QAAQ,QAEfS,OAAS,IAAIH,OAEnBG,OAAOC,YACNH,YAAYI,QAAQF,OAAOG,GAAGC,IAAK,CAClCC,oBAAoB,EACpBC,iBAAiB,IACfC,MAAMC,GAAM,IAAIlB,gBAAgBkB,EAAG,aAGvCR,OAAOS,SACLC,uBACAC,eAAe,CACf,CAAEC,GAAI,OAAQC,KAAM,UAAWC,SAAS,GACxC,CAAEF,GAAI,SAAUC,KAAM,mBACtB,CAAED,GAAI,OAAQC,KAAM,eACpB,CAAED,GAAI,SAAUC,KAAM,UACtB,CAAED,GAAI,SAAUC,KAAM,YACtB,CAAED,GAAI,gBAAiBC,KAAM,iBAC7B,CAAED,GAAI,UAAWC,KAAM,aACvB,CAAED,GAAI,MAAOC,KAAM,sBACnB,CAAED,GAAI,QAASC,KAAM,WAErBE,wBACAC,wBAAwB,CACxBC,MAAM,EACNC,MAAM,EACNC,MAAM,IAENC,gBAAgBrB,KAAKsB,KAAKC,UAAW,UACrCC,mBAAmBxB,KAAKsB,KAAKC,UAAW,aAE1CtB,OAAOwB,KAAK,SAASC,UACpBzB,OAAO0B,YAAW,IAAM1B,OAAO2B,QAAQC,KAAK5B,OAAO6B,KAAKjB,KAAK,WAEvDZ,OAAO8B,OAAOC,WAEpB,MAIMC,EAAW,CAChB,GALiBhC,OAAOiC,OAAOC,MAAMC,QAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAEC,aAAa,WAMzE,GALoBtC,OAAOS,SAAS8B,SAASC,gBAM7C,GALkBxC,OAAOiC,OAAOC,MAAMM,cAMtC,0BAGKC,EAAS,YAAYT,EAASU,KAAKC,MAAMD,KAAKE,SAAWZ,EAASa,WAExE7C,OAAO8C,aAAY,IAAM9C,OAAO6B,KAAKkB,YAAYN,EAAQ,CAAEO,KAAM,cAAe,KAEhFhD,OAAOiD,OAAOC,KAAK,gBAAgBlD,OAAO6B,KAAKsB,WAGhDnD,OAAOoD,GAAG,kBAAmBC,IAC5B,MAAMC,EAAUtD,OAAOS,SAAS8B,SAASgB,KAAK/C,GAAMA,EAAEK,OAChD2C,EAAO9D,WAAW2D,EAAII,QAASH,GAErC,OAAa,OAATE,EACIH,EAAIK,MACV,0BAA0BL,EAAIM,MAAMC,4BAA4B5D,OAAO6B,KAAKsB,wCAE1D,iBAATK,EACHH,EAAIK,MACV,0BAA0BL,EAAIM,MAAMC,4BAA4B5D,OAAO6B,KAAKsB,2DAA2DK,OAErIK,MAAMC,QAAQN,GACVH,EAAIK,MACV,0BAA0BL,EAAIM,MAAMC,4BACnC5D,OAAO6B,KAAKsB,yDACyCK,EACpDD,KAAKQ,GAAO,KAAKA,QACjB1C,KAAK,cANT,KAUDrB,OAAOoD,GAAG,QAASpD,OAAOiD,OAAOe,OAEjChE,OAAOoD,GAAG,SAAUa,GAAMjE,OAAOiD,OAAOiB,MAAMD,EAAEE,SAEhDnE,OAAOoD,GAAG,OAAQgB,GAAMpE,OAAO2B,QAAQ0C,iBAAiBD,KAExDpE,OAAOG,GAAGqB,KAAK,SAAS,IAAMxB,OAAOiD,OAAOC,KAAK,uBAEjDlD,OAAOG,GAAGiD,GAAG,QAASpD,OAAOiD,OAAOe,OAEpChE,OAAOG,GAAGiD,GAAG,SAAUa,GAAMjE,OAAOiD,OAAOiB,MAAMD,EAAEE,SAEnDnE,OAAOsE,IAAIlB,GAAG,kBAAmBmB,IAChCvE,OAAOiC,OAAOC,MAAMsC,SAAQ/C,MAAOkC,IAClC,MAAMc,QAAazE,OAAOG,GAAGuE,IAAI,gBAAgBf,EAAM/C,MAEvD,GAAa,OAAT6D,EAAe,OAAO,EAE1B,MAAME,EAAO,IAAIlF,cAAcgF,EAAK7D,GAAI6D,EAAKG,OACvCC,GAAQ,IAAIrF,cAChBsF,SAAS,KAAKP,EAAKQ,WACnBC,eAAepF,WAAW2E,EAAKU,cAC/BC,OAAOX,EAAKY,MACZC,SAAS,UACTC,SAAS,mCACTC,eAEFX,EAAKY,KAAKV,SAIZ7E,OAAO2B,QAAQyB,GAAG,eAAgBoC,GAASxF,OAAOiD,OAAOC,KAAK,SAASsC,EAAKC,QAAQC,4BAEpF1F,OAAO2B,QAAQyB,GAAG,aAAa,CAACoC,EAAMtB,IACrClE,OAAOiD,OAAOiB,MAAM,SAASsB,EAAKC,QAAQC,qCAAqCxB,EAAMyB,cAGtF3F,OAAO2B,QAAQyB,GAAG,cAAc,CAACwC,EAAQC,KACxB7F,OAAO8F,SAAS5D,MAAMwC,IAAIkB,EAAOG,aAEzCR,KAAK,kBAAkBM,EAAMd,yBAAyBc,EAAMG,UAAU7C,UAG/EnD,OAAO2B,QAAQyB,GAAG,YAAawC,IAC9B,MAAMK,EAAUjG,OAAO8F,SAAS5D,MAAMwC,IAAIkB,EAAOG,aAE3ClB,EAAQ,IAAIrF,aAAa,CAAEyF,YAAa,uBAAwBiB,MAAO,WAE7ED,EAAQV,KAAKV,GACbe,EAAOO,aAGRnG,OAAOoG,QAEPC,OAAOC,QAAUtG","file":"index.js","sourcesContent":["const { MongoDBProvider } = require('commando-provider-mongo');\nconst { MessageEmbed, WebhookClient } = require('discord.js');\nconst didYouMean = require('didyoumean2').default;\nconst { htmlToText } = require('html-to-text');\nconst Client = require('./Structures/Client');\nconst { MongoClient } = require('mongodb');\nconst path = require('path');\n\nconst client = new Client();\n\nclient.setProvider(\n\tMongoClient.connect(client.db.url, {\n\t\tuseUnifiedTopology: true,\n\t\tuseNewUrlParser: true,\n\t}).then((c) => new MongoDBProvider(c, 'tanaka')),\n);\n\nclient.registry\n\t.registerDefaultTypes()\n\t.registerGroups([\n\t\t{ id: 'util', name: 'Utility', guarded: true },\n\t\t{ id: 'random', name: 'Random Response' },\n\t\t{ id: 'info', name: 'Information' },\n\t\t{ id: 'search', name: 'Search' },\n\t\t{ id: 'remind', name: 'Reminder' },\n\t\t{ id: 'anime-updates', name: 'Anime Updates' },\n\t\t{ id: 'codebin', name: 'Code Bins' },\n\t\t{ id: 'img', name: 'Image Manipulation' },\n\t\t{ id: 'music', name: 'Music' },\n\t])\n\t.registerDefaultGroups()\n\t.registerDefaultCommands({\n\t\thelp: false,\n\t\teval: false,\n\t\tping: false,\n\t})\n\t.registerTypesIn(path.join(__dirname, 'Types'))\n\t.registerCommandsIn(path.join(__dirname, 'Commands'));\n\nclient.once('ready', async () => {\n\tclient.setTimeout(() => client.manager.init(client.user.id), 5000);\n\n\tawait client.timers.fetchAll();\n\n\tconst userCount = client.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\tconst commandCount = client.registry.commands.size;\n\tconst guildCount = client.guilds.cache.size;\n\n\tconst statuses = [\n\t\t`${userCount} users`,\n\t\t`${commandCount} commands`,\n\t\t`${guildCount} guilds`,\n\t\t'https://tanaka.1chi.tk',\n\t];\n\n\tconst status = `t!help | ${statuses[Math.floor(Math.random() * statuses.length)]}`;\n\n\tclient.setInterval(() => client.user.setActivity(status, { type: 'WATCHING' }), 30000);\n\n\tclient.logger.info(`Logged in as ${client.user.tag}.`);\n});\n\nclient.on('unknownCommand', (msg) => {\n\tconst cmdList = client.registry.commands.map((c) => c.name);\n\tconst mean = didYouMean(msg.content, cmdList);\n\n\tif (mean === null)\n\t\treturn msg.reply(\n\t\t\t`Unknown command. Use \\`${msg.guild.commandPrefix}help\\` or \\`${client.user.tag} help\\` to view the command list.`,\n\t\t);\n\tif (typeof mean === 'string')\n\t\treturn msg.reply(\n\t\t\t`Unknown command. Use \\`${msg.guild.commandPrefix}help\\` or \\`${client.user.tag} help\\` to view the command list.\\n\\nDid you mean? \\`${mean}\\``,\n\t\t);\n\tif (Array.isArray(mean))\n\t\treturn msg.reply(\n\t\t\t`Unknown command. Use \\`${msg.guild.commandPrefix}help\\` or \\`${\n\t\t\t\tclient.user.tag\n\t\t\t} help\\` to view the command list.\\n\\nDid you mean? ${mean\n\t\t\t\t.map((cm) => `\\`${cm}\\``)\n\t\t\t\t.join(', ')}`,\n\t\t);\n});\n\nclient.on('debug', client.logger.debug);\n\nclient.on('error', (e) => client.logger.error(e.stack));\n\nclient.on('raw', (d) => client.manager.updateVoiceState(d));\n\nclient.db.once('ready', () => client.logger.info('MongoDB is ready!'));\n\nclient.db.on('debug', client.logger.debug);\n\nclient.db.on('error', (e) => client.logger.error(e.stack));\n\nclient.rss.on('item:new:anime', (item) => {\n\tclient.guilds.cache.forEach(async (guild) => {\n\t\tconst data = await client.db.get(`animeUpdates-${guild.id}`);\n\n\t\tif (data === null) return false;\n\n\t\tconst hook = new WebhookClient(data.id, data.token);\n\t\tconst embed = new MessageEmbed()\n\t\t\t.setTitle(`**${item.title}**`)\n\t\t\t.setDescription(htmlToText(item.description))\n\t\t\t.setURL(item.link)\n\t\t\t.setColor('RANDOM')\n\t\t\t.setImage('https://i.imgur.com/R3JCtNK.jpg')\n\t\t\t.setTimestamp();\n\n\t\thook.send(embed);\n\t});\n});\n\nclient.manager.on('nodeConnect', (node) => client.logger.info(`Node \"${node.options.identifier}\" connected.`));\n\nclient.manager.on('nodeError', (node, error) =>\n\tclient.logger.error(`Node \"${node.options.identifier}\" encountered an error: ${error.message}.`),\n);\n\nclient.manager.on('trackStart', (player, track) => {\n\tconst channel = client.channels.cache.get(player.textChannel);\n\n\tchannel.send(`Now playing: \\`${track.title}\\`, requested by ${track.requester.tag}`);\n});\n\nclient.manager.on('queueEnd', (player) => {\n\tconst channel = client.channels.cache.get(player.textChannel);\n\n\tconst embed = new MessageEmbed({ description: 'The queue has ended.', color: 'RANDOM' });\n\n\tchannel.send(embed);\n\tplayer.destroy();\n});\n\nclient.login();\n\nmodule.exports = client;\n"]}