{"version":3,"sources":["Structures/TimerManager.js"],"names":["module","exports","TimerManager","[object Object]","client","Object","defineProperty","this","value","timeouts","Map","timers","redis","hgetall","data","values","JSON","parse","setTimer","channelID","Date","time","userID","title","updateRedis","now","toISOString","timeout","setTimeout","async","channel","channels","fetch","send","hdel","hset","stringify","set","clearTimeout","get","delete","hexists"],"mappings":"AAAAA,OAAOC,QAAU,MAAMC,aACtBC,YAAYC,GACXC,OAAOC,eAAeC,KAAM,SAAU,CAAEC,MAAOJ,IAE/CG,KAAKE,SAAW,IAAIC,IAGrBP,iBACC,MAAMQ,QAAeJ,KAAKH,OAAOQ,MAAMC,QAAQ,SAC/C,IAAK,IAAIC,KAAQT,OAAOU,OAAOJ,GAC9BG,EAAOE,KAAKC,MAAMH,SACZP,KAAKW,SACVJ,EAAKK,UACL,IAAIC,KAAKN,EAAKO,MAAQ,IAAID,KAC1BN,EAAKQ,OACLR,EAAKS,OACL,GAIF,OAAOhB,KAGRJ,eAAegB,EAAWE,EAAMC,EAAQC,EAAOC,GAAc,GAC5D,MAAMV,EAAO,CAAEO,KAAM,IAAID,KAAKA,KAAKK,MAAQJ,GAAMK,cAAeP,UAAAA,EAAWG,OAAAA,EAAQC,MAAAA,GAC7EI,EAAUpB,KAAKH,OAAOwB,YAAWC,UACtC,IACC,MAAMC,QAAgBvB,KAAKH,OAAO2B,SAASC,MAAMb,SAC3CW,EAAQG,KACb,aAAaX,0CAA+CC,SAE5D,cACKhB,KAAKH,OAAOQ,MAAMsB,KAAK,QAAS,GAAGf,KAAaG,QAErDD,GAKH,OAJIG,SACGjB,KAAKH,OAAOQ,MAAMuB,KAAK,QAAS,CAAEhC,CAAC,GAAGgB,KAAaG,KAAWN,KAAKoB,UAAUtB,KACpFP,KAAKE,SAAS4B,IAAI,GAAGlB,KAAaG,IAAUK,GAErCA,EAGRxB,YAAYgB,EAAWG,GAItB,OAHAf,KAAKH,OAAOkC,aAAa/B,KAAKE,SAAS8B,IAAI,GAAGpB,KAAaG,MAC3Df,KAAKE,SAAS+B,OAAO,GAAGrB,KAAaG,KAE9Bf,KAAKH,OAAOQ,MAAMsB,KAAK,QAAS,GAAGf,KAAaG,KAGxDnB,OAAOgB,EAAWG,GACjB,OAAOf,KAAKH,OAAOQ,MAAM6B,QAAQ,QAAS,GAAGtB,KAAaG","file":"TimerManager.js","sourcesContent":["module.exports = class TimerManager {\n\tconstructor(client) {\n\t\tObject.defineProperty(this, 'client', { value: client });\n\n\t\tthis.timeouts = new Map();\n\t}\n\n\tasync fetchAll() {\n\t\tconst timers = await this.client.redis.hgetall('timer');\n\t\tfor (let data of Object.values(timers)) {\n\t\t\tdata = JSON.parse(data);\n\t\t\tawait this.setTimer(\n\t\t\t\tdata.channelID,\n\t\t\t\tnew Date(data.time) - new Date(),\n\t\t\t\tdata.userID,\n\t\t\t\tdata.title,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tasync setTimer(channelID, time, userID, title, updateRedis = true) {\n\t\tconst data = { time: new Date(Date.now() + time).toISOString(), channelID, userID, title };\n\t\tconst timeout = this.client.setTimeout(async () => {\n\t\t\ttry {\n\t\t\t\tconst channel = await this.client.channels.fetch(channelID);\n\t\t\t\tawait channel.send(\n\t\t\t\t\t`üï∞Ô∏è Hey <@${userID}>, you wanted me to remind you of: **\"${title}\"**.`,\n\t\t\t\t);\n\t\t\t} finally {\n\t\t\t\tawait this.client.redis.hdel('timer', `${channelID}-${userID}`);\n\t\t\t}\n\t\t}, time);\n\t\tif (updateRedis)\n\t\t\tawait this.client.redis.hset('timer', { [`${channelID}-${userID}`]: JSON.stringify(data) });\n\t\tthis.timeouts.set(`${channelID}-${userID}`, timeout);\n\n\t\treturn timeout;\n\t}\n\n\tdeleteTimer(channelID, userID) {\n\t\tthis.client.clearTimeout(this.timeouts.get(`${channelID}-${userID}`));\n\t\tthis.timeouts.delete(`${channelID}-${userID}`);\n\n\t\treturn this.client.redis.hdel('timer', `${channelID}-${userID}`);\n\t}\n\n\texists(channelID, userID) {\n\t\treturn this.client.redis.hexists('timer', `${channelID}-${userID}`);\n\t}\n};\n"]}