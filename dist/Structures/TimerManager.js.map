{"version":3,"sources":["Structures/TimerManager.js"],"names":["module","exports","[object Object]","client","this","timeouts","Map","timers","redis","hgetall","data","Object","values","JSON","parse","setTimer","channelID","Date","time","userID","title","updateRedis","now","toISOString","timeout","setTimeout","async","channel","channels","fetch","send","hdel","hset","stringify","set","clearTimeout","get","delete","hexists"],"mappings":"AAAAA,OAAOC,QAAU,MAChBC,YAAYC,GAEXC,KAAKD,OAASA,EACdC,KAAKC,SAAW,IAAIC,IAGrBJ,iBACC,MAAMK,QAAeH,KAAKD,OAAOK,MAAMC,QAAQ,SAC/C,IAAK,IAAIC,KAAQC,OAAOC,OAAOL,GAC9BG,EAAOG,KAAKC,MAAMJ,SACZN,KAAKW,SACVL,EAAKM,UACL,IAAIC,KAAKP,EAAKQ,MAAQ,IAAID,KAC1BP,EAAKS,OACLT,EAAKU,OACL,GAIF,OAAOhB,KAGRF,eAAec,EAAWE,EAAMC,EAAQC,EAAOC,GAAc,GAC5D,MAAMX,EAAO,CAAEQ,KAAM,IAAID,KAAKA,KAAKK,MAAQJ,GAAMK,cAAeP,UAAAA,EAAWG,OAAAA,EAAQC,MAAAA,GAC7EI,EAAUpB,KAAKD,OAAOsB,YAAWC,UACtC,IACC,MAAMC,QAAgBvB,KAAKD,OAAOyB,SAASC,MAAMb,SAC3CW,EAAQG,KACb,aAAaX,0CAA+CC,SAE5D,cACKhB,KAAKD,OAAOK,MAAMuB,KAAK,QAAS,GAAGf,KAAaG,QAErDD,GAKH,OAJIG,SACGjB,KAAKD,OAAOK,MAAMwB,KAAK,QAAS,CAAE9B,CAAC,GAAGc,KAAaG,KAAWN,KAAKoB,UAAUvB,KACpFN,KAAKC,SAAS6B,IAAI,GAAGlB,KAAaG,IAAUK,GAErCA,EAGRtB,YAAYc,EAAWG,GAItB,OAHAf,KAAKD,OAAOgC,aAAa/B,KAAKC,SAAS+B,IAAI,GAAGpB,KAAaG,MAC3Df,KAAKC,SAASgC,OAAO,GAAGrB,KAAaG,KAE9Bf,KAAKD,OAAOK,MAAMuB,KAAK,QAAS,GAAGf,KAAaG,KAGxDjB,OAAOc,EAAWG,GACjB,OAAOf,KAAKD,OAAOK,MAAM8B,QAAQ,QAAS,GAAGtB,KAAaG","file":"TimerManager.js","sourcesContent":["module.exports = class TimerManager {\n\tconstructor(client) {\n\t\t/** @type {import('./Client')} */\n\t\tthis.client = client;\n\t\tthis.timeouts = new Map();\n\t}\n\n\tasync fetchAll() {\n\t\tconst timers = await this.client.redis.hgetall('timer');\n\t\tfor (let data of Object.values(timers)) {\n\t\t\tdata = JSON.parse(data);\n\t\t\tawait this.setTimer(\n\t\t\t\tdata.channelID,\n\t\t\t\tnew Date(data.time) - new Date(),\n\t\t\t\tdata.userID,\n\t\t\t\tdata.title,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tasync setTimer(channelID, time, userID, title, updateRedis = true) {\n\t\tconst data = { time: new Date(Date.now() + time).toISOString(), channelID, userID, title };\n\t\tconst timeout = this.client.setTimeout(async () => {\n\t\t\ttry {\n\t\t\t\tconst channel = await this.client.channels.fetch(channelID);\n\t\t\t\tawait channel.send(\n\t\t\t\t\t`üï∞Ô∏è Hey <@${userID}>, you wanted me to remind you of: **\"${title}\"**.`,\n\t\t\t\t);\n\t\t\t} finally {\n\t\t\t\tawait this.client.redis.hdel('timer', `${channelID}-${userID}`);\n\t\t\t}\n\t\t}, time);\n\t\tif (updateRedis)\n\t\t\tawait this.client.redis.hset('timer', { [`${channelID}-${userID}`]: JSON.stringify(data) });\n\t\tthis.timeouts.set(`${channelID}-${userID}`, timeout);\n\n\t\treturn timeout;\n\t}\n\n\tdeleteTimer(channelID, userID) {\n\t\tthis.client.clearTimeout(this.timeouts.get(`${channelID}-${userID}`));\n\t\tthis.timeouts.delete(`${channelID}-${userID}`);\n\n\t\treturn this.client.redis.hdel('timer', `${channelID}-${userID}`);\n\t}\n\n\texists(channelID, userID) {\n\t\treturn this.client.redis.hexists('timer', `${channelID}-${userID}`);\n\t}\n};\n"]}