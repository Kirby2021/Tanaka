{"version":3,"sources":["Structures/Client.js"],"names":["Intents","WebhookClient","Collection","require","MongoDBProvider","CommandoClient","TimerManager","execSync","Velocity","MongoClient","Database","Manager","OpenEval","glob","Turndown","snoowrap","BotList","logger","Redis","web","path","module","exports","[object Object]","options","super","commandPrefix","process","env","COMMAND_PREFIX","owner","OWNER_ID","intents","NON_PRIVILEGED","FLAGS","GUILDS","partials","allowedMentions","repliedUser","parse","this","db","MONGO_URI","useNewUrlParser","useUnifiedTopology","testWebhook","TEST_WEBHOOK_ID","TEST_WEBHOOK_TOKEN","redis","timers","converter","bl","client","manager","send","id","payload","guild","guilds","cache","get","shard","events","piston","reddit","userAgent","username","password","REDDIT_PASSWORD","clientId","REDDIT_CLIENT_ID","clientSecret","REDDIT_CLIENT_SECRET","perspective","PERSPECTIVE_KEY","ip","timeout","encoding","directory","dirname","main","filename","sep","broadcastEval","reduce","a","b","memberCount","fetchClientValues","size","channels","token","DISCORD_TOKEN","registerCommands","loadEvents","registerProvider","login","eventFile","event","set","name","emitter","type","args","run","registry","groups","map","g","commands","filter","c","hidden","extra","ownerOnly","nsfw","description","join","registerDefaultTypes","registerGroups","guarded","registerDefaultGroups","registerDefaultCommands","unknownCommand","help","eval","ping","commandState","prefix","registerTypesIn","__dirname","registerCommandsIn","mongo","connect","setProvider"],"mappings":"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","file":"Client.js","sourcesContent":["const { Intents, WebhookClient, Collection } = require('discord.js');\nconst { MongoDBProvider } = require('commando-provider-mongo');\nconst { CommandoClient } = require('discord.js-commando');\nconst TimerManager = require('./TimerManager');\nconst { execSync } = require('child_process');\nconst { Velocity } = require('velocity-api');\nconst { MongoClient } = require('mongodb');\nconst { Database } = require('quickmongo');\nconst { Manager } = require('erela.js');\nconst OpenEval = require('open-eval');\nconst glob = require('glob-promise');\nconst Turndown = require('turndown');\nconst snoowrap = require('snoowrap');\nconst BotList = require('./BotList');\nconst logger = require('./Logger');\nconst Redis = require('./Redis');\nconst web = require('../Web');\nconst path = require('path');\n\nmodule.exports = class Client extends CommandoClient {\n\tconstructor(options) {\n\t\tsuper({\n\t\t\tcommandPrefix: process.env.COMMAND_PREFIX,\n\t\t\towner: process.env.OWNER_ID,\n\t\t\tintents: [Intents.NON_PRIVILEGED, Intents.FLAGS.GUILDS],\n\t\t\tpartials: ['CHANNEL'],\n\t\t\tallowedMentions: {\n\t\t\t\trepliedUser: false,\n\t\t\t\tparse: ['roles', 'users'],\n\t\t\t},\n\t\t\t...options,\n\t\t});\n\n\t\tthis.db = new Database(process.env.MONGO_URI, 'tanaka', {\n\t\t\tuseNewUrlParser: true,\n\t\t\tuseUnifiedTopology: true,\n\t\t});\n\n\t\tthis.logger = logger;\n\n\t\tthis.testWebhook = new WebhookClient(process.env.TEST_WEBHOOK_ID, process.env.TEST_WEBHOOK_TOKEN);\n\n\t\tthis.redis = new Redis(this).db;\n\n\t\tthis.timers = new TimerManager(this);\n\n\t\tthis.converter = new Turndown();\n\n\t\tthis.bl = new BotList(this);\n\n\t\tthis.client = this;\n\n\t\tthis.manager = new Manager({\n\t\t\tsend: (id, payload) => {\n\t\t\t\tconst guild = this.guilds.cache.get(id);\n\n\t\t\t\tif (guild) guild.shard.send(payload);\n\t\t\t},\n\t\t});\n\n\t\tthis.events = new Collection();\n\n\t\tthis.piston = new OpenEval();\n\n\t\tthis.reddit = new snoowrap({\n\t\t\tuserAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2869.0 Safari/537.36',\n\t\t\tusername: 'TomioCodes',\n\t\t\tpassword: process.env.REDDIT_PASSWORD,\n\t\t\tclientId: process.env.REDDIT_CLIENT_ID,\n\t\t\tclientSecret: process.env.REDDIT_CLIENT_SECRET,\n\t\t});\n\n\t\tthis.perspective = new Velocity(process.env.PERSPECTIVE_KEY);\n\t}\n\n\tget ip() {\n\t\tconst ip = execSync('curl https://ipecho.net/plain', { timeout: 30000, encoding: 'utf-8' });\n\t\treturn ip;\n\t}\n\n\tget directory() {\n\t\treturn `${path.dirname(require.main.filename)}${path.sep}`;\n\t}\n\n\tasync userCount() {\n\t\tif (this.shard) {\n\t\t\tconst count = await this.shard.broadcastEval(\n\t\t\t\t'this.guilds.cache.reduce((a, b) => a + b.memberCount, 0)',\n\t\t\t);\n\n\t\t\treturn count.reduce((a, b) => a + b, 0);\n\t\t}\n\n\t\treturn this.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\t}\n\n\tasync guildCount() {\n\t\tif (this.shard) {\n\t\t\tconst count = await this.shard.fetchClientValues('guilds.cache.size');\n\n\t\t\treturn count.reduce((a, b) => a + b, 0);\n\t\t}\n\n\t\treturn this.guilds.cache.size;\n\t}\n\n\tasync channelCount() {\n\t\tif (this.shard) {\n\t\t\tconst count = await this.shard.fetchClientValues('channels.cache.size');\n\n\t\t\treturn count.reduce((a, b) => a + b, 0);\n\t\t}\n\n\t\treturn this.channels.cache.size;\n\t}\n\n\tasync login(token = process.env.DISCORD_TOKEN) {\n\t\tthis.registerCommands();\n\t\tweb(this);\n\n\t\tawait this.loadEvents();\n\t\tawait this.registerProvider();\n\n\t\treturn super.login(token);\n\t}\n\n\tasync loadEvents() {\n\t\tconst events = await glob(`${this.directory}Events/**/*.js`);\n\n\t\tfor (const eventFile of events) {\n\t\t\tdelete require.cache[eventFile];\n\n\t\t\tconst File = require(eventFile);\n\t\t\tconst event = new File(this.client);\n\n\t\t\tthis.events.set(event.name, event);\n\t\t\tevent.emitter[event.type](event.name, (...args) => event.run(...args));\n\t\t}\n\t}\n\n\tgenerateCommandList() {\n\t\tconst list = this.registry.groups\n\t\t\t.map((g) => {\n\t\t\t\tconst commands = g.commands.filter((c) => !c.hidden);\n\t\t\t\treturn `\\n<h3>${g.name}:</h3>\\n\\n<ul>${commands\n\t\t\t\t\t.map((c) => {\n\t\t\t\t\t\tconst extra = `${c.ownerOnly ? ' (Owner-Only)' : ''}${\n\t\t\t\t\t\t\tc.nsfw ? ' (NSFW)' : ''\n\t\t\t\t\t\t}`;\n\t\t\t\t\t\treturn `<li> <strong>${c.name}:</strong> ${c.description}${extra}</li>`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('</ul>\\n')}`;\n\t\t\t})\n\t\t\t.join('\\n');\n\n\t\treturn list;\n\t}\n\n\tregisterCommands() {\n\t\tthis.client.registry\n\t\t\t.registerDefaultTypes()\n\t\t\t.registerGroups([\n\t\t\t\t{ id: 'util', name: 'Utility', guarded: true },\n\t\t\t\t{ id: 'random', name: 'Random Response' },\n\t\t\t\t{ id: 'info', name: 'Information' },\n\t\t\t\t{ id: 'search', name: 'Search' },\n\t\t\t\t{ id: 'remind', name: 'Reminder' },\n\t\t\t\t{ id: 'anime-updates', name: 'Anime Updates' },\n\t\t\t\t{ id: 'codebin', name: 'Code Bins' },\n\t\t\t\t{ id: 'img', name: 'Image Manipulation' },\n\t\t\t\t{ id: 'music', name: 'Music' },\n\t\t\t\t{ id: 'nsfw', name: 'NSFW' },\n\t\t\t])\n\t\t\t.registerDefaultGroups()\n\t\t\t.registerDefaultCommands({\n\t\t\t\tunknownCommand: false,\n\t\t\t\thelp: false,\n\t\t\t\teval: false,\n\t\t\t\tping: false,\n\t\t\t\tcommandState: false,\n\t\t\t\tprefix: false,\n\t\t\t})\n\t\t\t.registerTypesIn(path.join(__dirname, '..', 'Types'))\n\t\t\t.registerCommandsIn(path.join(__dirname, '..', 'Commands'));\n\t}\n\n\tasync registerProvider() {\n\t\tconst mongo = await MongoClient.connect(process.env.MONGO_URI, {\n\t\t\tuseNewUrlParser: true,\n\t\t\tuseUnifiedTopology: true,\n\t\t});\n\n\t\tthis.setProvider(new MongoDBProvider(mongo, 'tanaka'));\n\t}\n};\n"]}