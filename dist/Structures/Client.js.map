{"version":3,"sources":["Structures/Client.js"],"names":["Intents","WebhookClient","Collection","require","CommandoClient","KeyvProvider","FeedEmitter","TimerManager","execSync","Manager","glob","Turndown","BotList","logger","Redis","web","Keyv","path","module","exports","[object Object]","options","super","commandPrefix","process","env","COMMAND_PREFIX","owner","OWNER_ID","intents","NON_PRIVILEGED","FLAGS","GUILDS","partials","this","db","DATABASE_URL","rss","testWebhook","TEST_WEBHOOK_ID","TEST_WEBHOOK_TOKEN","redis","timers","converter","bl","client","manager","send","id","payload","guild","guilds","cache","get","shard","events","ip","timeout","encoding","directory","dirname","main","filename","sep","broadcastEval","reduce","a","b","memberCount","fetchClientValues","size","channels","token","DISCORD_TOKEN","addRSSListeners","registerCommands","registerProvider","loadEvents","login","eventFile","event","set","name","emitter","type","args","run","url","refresh","eventName","ignoreFirst","forEach","feed","add","registry","groups","map","g","commands","filter","c","hidden","extra","ownerOnly","nsfw","description","join","registerDefaultTypes","registerGroups","guarded","registerDefaultGroups","registerDefaultCommands","unknownCommand","help","eval","ping","registerTypesIn","__dirname","registerCommandsIn","setProvider"],"mappings":"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","file":"Client.js","sourcesContent":["const { Intents, WebhookClient, Collection } = require('discord.js');\nconst { CommandoClient } = require('discord.js-commando');\nconst KeyvProvider = require('commando-provider-keyv');\nconst { FeedEmitter } = require('rss-emitter-ts');\nconst TimerManager = require('./TimerManager');\nconst { execSync } = require('child_process');\nconst { Manager } = require('erela.js');\nconst glob = require('glob-promise');\nconst Turndown = require('turndown');\nconst BotList = require('./BotList');\nconst logger = require('./Logger');\nconst Redis = require('./Redis');\nconst web = require('../Web');\nconst Keyv = require('keyv');\nconst path = require('path');\n\nmodule.exports = class Client extends CommandoClient {\n\tconstructor(options) {\n\t\tsuper({\n\t\t\tcommandPrefix: process.env.COMMAND_PREFIX,\n\t\t\towner: process.env.OWNER_ID,\n\t\t\tintents: [Intents.NON_PRIVILEGED, Intents.FLAGS.GUILDS],\n\t\t\tpartials: ['CHANNEL'],\n\t\t\t...options,\n\t\t});\n\n\t\tthis.db = new Keyv(process.env.DATABASE_URL);\n\n\t\tthis.logger = logger;\n\n\t\tthis.rss = new FeedEmitter();\n\n\t\tthis.testWebhook = new WebhookClient(process.env.TEST_WEBHOOK_ID, process.env.TEST_WEBHOOK_TOKEN);\n\n\t\tthis.redis = new Redis(this).db;\n\n\t\tthis.timers = new TimerManager(this);\n\n\t\tthis.converter = new Turndown();\n\n\t\tthis.bl = new BotList(this);\n\n\t\tthis.client = this;\n\n\t\tthis.manager = new Manager({\n\t\t\tsend: (id, payload) => {\n\t\t\t\tconst guild = this.guilds.cache.get(id);\n\n\t\t\t\tif (guild) guild.shard.send(payload);\n\t\t\t},\n\t\t});\n\n\t\tthis.events = new Collection();\n\t}\n\n\tget ip() {\n\t\tconst ip = execSync('curl https://ipecho.net/plain', { timeout: 30000, encoding: 'utf-8' });\n\t\treturn ip;\n\t}\n\n\tget directory() {\n\t\treturn `${path.dirname(require.main.filename)}${path.sep}`;\n\t}\n\n\tasync userCount() {\n\t\tif (this.shard) {\n\t\t\tconst count = await this.shard.broadcastEval(\n\t\t\t\t'this.guilds.cache.reduce((a, b) => a + b.memberCount, 0)',\n\t\t\t);\n\n\t\t\treturn count.reduce((a, b) => a + b, 0);\n\t\t}\n\n\t\treturn this.guilds.cache.reduce((a, b) => a + b.memberCount, 0);\n\t}\n\n\tasync guildCount() {\n\t\tif (this.shard) {\n\t\t\tconst count = await this.shard.fetchClientValues('guilds.cache.size');\n\n\t\t\treturn count.reduce((a, b) => a + b, 0);\n\t\t}\n\n\t\treturn this.guilds.cache.size;\n\t}\n\n\tasync channelCount() {\n\t\tif (this.shard) {\n\t\t\tconst count = await this.shard.fetchClientValues('channels.cache.size');\n\n\t\t\treturn count.reduce((a, b) => a + b, 0);\n\t\t}\n\n\t\treturn this.channels.cache.size;\n\t}\n\n\tasync login(token = process.env.DISCORD_TOKEN) {\n\t\tthis.addRSSListeners();\n\t\tthis.registerCommands();\n\t\tthis.registerProvider();\n\t\tweb(this);\n\n\t\tawait this.loadEvents();\n\n\t\treturn super.login(token);\n\t}\n\n\tasync loadEvents() {\n\t\tconst events = await glob(`${this.directory}Events/**/*.js`);\n\n\t\tfor (const eventFile of events) {\n\t\t\tdelete require.cache[eventFile];\n\n\t\t\tconst File = require(eventFile);\n\t\t\tconst event = new File(this.client);\n\n\t\t\tthis.events.set(event.name, event);\n\t\t\tevent.emitter[event.type](event.name, (...args) => event.run(...args));\n\t\t}\n\t}\n\n\taddRSSListeners() {\n\t\tconst feeds = [\n\t\t\t{\n\t\t\t\turl: 'https://www.animenewsnetwork.com/all/rss.xml?ann-edition=us',\n\t\t\t\trefresh: 20000,\n\t\t\t\teventName: 'anime',\n\t\t\t\tignoreFirst: true,\n\t\t\t},\n\t\t];\n\n\t\tfeeds.forEach((feed) => this.rss.add(feed));\n\t}\n\n\tgenerateCommandList() {\n\t\tconst list = this.registry.groups\n\t\t\t.map((g) => {\n\t\t\t\tconst commands = g.commands.filter((c) => !c.hidden);\n\t\t\t\treturn `\\n<h3>${g.name}:</h3>\\n\\n<ul>${commands\n\t\t\t\t\t.map((c) => {\n\t\t\t\t\t\tconst extra = `${c.ownerOnly ? ' (Owner-Only)' : ''}${\n\t\t\t\t\t\t\tc.nsfw ? ' (NSFW)' : ''\n\t\t\t\t\t\t}`;\n\t\t\t\t\t\treturn `<li> <strong>${c.name}:</strong> ${c.description}${extra}</li>`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('</ul>\\n')}`;\n\t\t\t})\n\t\t\t.join('\\n');\n\n\t\treturn list;\n\t}\n\n\tregisterCommands() {\n\t\tthis.client.registry\n\t\t\t.registerDefaultTypes()\n\t\t\t.registerGroups([\n\t\t\t\t{ id: 'util', name: 'Utility', guarded: true },\n\t\t\t\t{ id: 'random', name: 'Random Response' },\n\t\t\t\t{ id: 'info', name: 'Information' },\n\t\t\t\t{ id: 'search', name: 'Search' },\n\t\t\t\t{ id: 'remind', name: 'Reminder' },\n\t\t\t\t{ id: 'anime-updates', name: 'Anime Updates' },\n\t\t\t\t{ id: 'codebin', name: 'Code Bins' },\n\t\t\t\t{ id: 'img', name: 'Image Manipulation' },\n\t\t\t\t{ id: 'music', name: 'Music' },\n\t\t\t])\n\t\t\t.registerDefaultGroups()\n\t\t\t.registerDefaultCommands({\n\t\t\t\tunknownCommand: false,\n\t\t\t\thelp: false,\n\t\t\t\teval: false,\n\t\t\t\tping: false,\n\t\t\t})\n\t\t\t.registerTypesIn(path.join(__dirname, '..', 'Types'))\n\t\t\t.registerCommandsIn(path.join(__dirname, '..', 'Commands'));\n\t}\n\n\tregisterProvider() {\n\t\tthis.setProvider(new KeyvProvider(this.db));\n\t}\n};\n"]}